hi everyone welcome back to another
video
in the web security academy series in
today's video we'll be exploiting a
blind based sql injection
using conditional responses to list the
content
of the database if you do not have an
account
on the web security academy you can get
one by visiting the url portsweger.net
web security and clicking on the sign up
button
i already have an account and i am
logged in so to access the academy i'm
going to click
on academy go down
select the learning path
go down select sql injection
select blind sql injection
and click on the exercise titled blind
sql injection
with conditional responses
all right let's get started so if you're
not familiar with the theory behind
blind based sequel injection i would
recommend watching the sql injection
theory video that is linked in the
description
i will go over the theory briefly in
this video since we do need that
knowledge in order to successfully
complete the exercise
but if you want a more in-depth
description i would definitely recommend
watching the sql injection
complete guide video all right let's
look at the
exercise this lab contains a blind sql
injection vulnerability
the application uses a tracking cookie
for analytics
and performs a sql query containing the
value of the submitted cookie
alright so we've got a vulnerable
parameter
and that's the tracking
cookie
the results of the sql query are not
returned and no error messages are
displayed
so because of this we can't use union
based sql injection
but the application includes a welcome
back message in the page if the query
returns any rows
all right so if the query that takes in
the cookie returns
any rows then you get a welcome back
message if it doesn't return any rows
then you don't get a welcome back
message
the database contains a different table
called users with columns called
username and password
you need to exploit the blind sql
injection vulnerability to find out the
password of the administrator user
to solve the lab login as the
administrator user
so we have a few end goals over here
one is to enumerate
the password of the administrator
and the second is to log in
as the administrator
user all right let's access the lab
okay so it looks like it's a similar
application to the one we've been
dealing with in the past couple of
exercises
if you look at the cookie editor
extension you can see over here that
there's two cookies one is the session
cookie which has this value and then two
is a tracking id cookie which has this
value
now because the exercise tells us we
know that this field is vulnerable
but if you didn't know that it was
vulnerable what you would do
is literally fuzz every parameter that
talks to the back end
and depending on the responses you get
from your fuzzing then you could figure
out
whether it's vulnerable or not okay so
now you could see there is home in my
account we don't see a welcome back
message because this is the first time
we use
this tracking id however now when we try
to visit another page it would be the
second time that we
use that tracking id and so we should be
presented with the welcome back message
so
let's go to for example accessories and
we get the welcome back message because
the tracking id already now exists
in the database now going back to helm
and so
on you'll always get that welcome back
message
all right so let's open up verb to see
how we could
confirm that this is vulnerable and then
how we could exploit it
i usually use the community edition of
burp but today i'm going
to be using the professional version of
burp
and the reason behind that is because
it's just so much faster
than the community edition but all the
tasks that i'm going to be performing
using the professional edition you
should be able to do with the community
edition it just will be a little bit
slower
and if you stick around till the end of
the video we'll also script this in
python
and this way even if your community
edition
is too slow you could simply write a
script in order to
finish this task okay let's make this a
little bit smaller
and i'm going to go to user options
display
and put this at 17.
okay that should be better alright
so to intercept the request in burp i'm
going to use my foxy proxy extension
and set it to send requests to burp and
then i'm going to
hit home and the request gets
intercepted in burp
and i'm going to make this a little bit
smaller as well just so that we could
see
more of the page so let's put it at
15 and change this to 15 as well
okay that looks better
all right so send this to repeater
because we're going to be running a
bunch of requests
and then turn intercept to be off
okay so looking at repeater i'm going to
put the request
and the response side by side by
clicking on this button over here
and closing this okay so the first thing
to do when testing for
blind based sql injection is to force
a true use case and see how the
application
responds and then force a false use case
and see how the application responds
if the application responds differently
depending on the true use case versus
the false use case then
you can successfully exploit that blind
based sql injection in order to infer
content from the database so the first
thing we're going to do
is confirm
that the parameter is vulnerable
to blind base sql
injection and to do that we have to try
and imagine how the query looks at the
backend
so i would say the query looks something
similar to this of course it's going to
be different
but it would be something similar so
select the tracking
id from say the tracking table of course
all of these would have different names
where tracking id
is equal to the tracking id over here
let's copy that and put it in here
now if this tracking id already exists
in the database because we've already
visited the
page with this tracking id then this
query returns
a tracking id and so depending on the
behavior that we saw it should return a
welcome back message
so let's hit send over here and see if
we get a welcome back message
and we do so let's make some notes
so if this tracking id exists
then the query would return a value
and then we get a welcome back message
however if the tracking id
doesn't exist
then query returns nothing
and then we don't get a welcome back
message
and let's confirm that by adding another
character to
the tracking id so that would be a
tracking id that doesn't exist in the
database
hit send and see if we get the welcome
back message and we don't
so zero matches and so this confirms
there is different behavior
uh between whether the tracking id
exists or not so whether this
condition over here is true or not so
now to confirm that this is vulnerable
to blind based sql injection we have to
enforce a true use case and confirm that
it reacts this way and then we have to
enforce a false use case
and confirm that it reacts in this way
over here
so to do that let's copy this
so we're imagining that this is our
query
now if we want to inject a true use case
what we can do is add a single quote
this single quote over here
closes this single quote over here and
then i'm going to use the
end operator and say 1 is equal to 1
and then comment out the rest of the
query so that i don't get a syntax error
for this single quote over here
okay so let's look at our query you have
select
tracking id from the tracking table
where tracking id
is equal to this and one is equal to
one now tracking id this tracking id we
already
tested with it and so we know it exists
in the database this will evaluate to
true
and one is equal to one will always
evaluate to true
and so this entire where clause will
evaluate to true which will result
in a tracking id being outputted which
will result
in the welcome back message and so
we should see since this is a true use
case
we should see a welcome back message
so let's confirm that that's happening
we'll copy our injected code
and we remove the character that we
added
and then ctrl u to url encode it
and hit send and here we go we find
welcome back message over here which
means that one
it interpreted this as sql code so we
definitely have a sql injection
but it also tells us that we get a will
come back message whenever the use case
is true
now if we can prove that we don't get a
welcome back message when the use case
is false
then we have an exploitable blind based
sql injection
so let's do that right now so instead of
one is equal to 1
we'll say 1 is equal to 0. so over here
you've got select the tracking id from
the tracking table
where tracking id is equal to this one
now we know this will evaluate to true
because this is a tracking id that we
already
visited the page with and then one is
equal to zero one will never be equal to
zero
and so this will evaluate to false false
and true is false and so
this entire query will return a false
and we said if it's a false
then we shouldn't get a welcome back
message
so let's check if that's actually the
case let's copy that
put it in the request
do control u to url encode it
and hit send and here we go
we do not get a welcome back message so
we've proved that the application
responds differently
on whether we're asking it a true
question versus a false question
now how can this be useful a simple use
case that we could start out with
is to ask the application if the users
table
exists in the database so the second
thing we're going to do
is confirm that we have
a users table of course because this is
a blind based sql injection we're stuck
asking the application true and false
questions and so we're going to ask the
application
does the user's table exists if we get a
welcome back message
that means it does exist if we don't get
a welcome back message that means
it doesn't exist okay so to do that
let's copy
this okay instead of saying one is equal
to one
we're gonna add a sub query and say
select
any random value so let's say x from the
users table
and limit the entry to only one
and check if that's equal to
x again x over here is an arbitrary
value it can be anything you want
but the idea is what this query does is
it says
if there is a users table output the
value
x for each entry in the users table so
if the users table has
five users we should get five rows that
have x in them
now this might destroy our query
and that's why i had to limit it to one
entry
and so what this says is output the
value
x for each entry in the users table and
limited to only one entry
now is this entry that is outputted
equal to x if it is then it evaluates to
true
if it's not it will evaluate to false
now obviously if the user's table
doesn't exist
this will evaluate to false and we
shouldn't get a welcome back message
however if the user's table does exist
it will output x for the first
entry in the user's table is x equal to
x
it is and so this evaluates to true
we know the tracking id evaluates to
true because this is the tracking id
we've been using and so
true and true evaluates to true and we
should get a welcome back message
so that's how we're asking the question
of whether the users table exists or not
so let's paste that in our request
do control u to url encoded
and hit send and we get one match
so we see that we get the welcome back
message and so that means
that the users table exists in the
database
okay so the next thing to do is confirm
that the username
administrator exists in the database
so it exists in the users table
and to do that we use the exact same
technique over here
so let's copy that so instead of select
x we're going to say
select the username from the users table
where username
is equal to administrator
and then we're going to check if that's
equal to administrator if it is
then this whole query evaluates to true
okay
so let's explain what this query does so
select the username
from the users table where username is
equal to administrator
so this will output the text
administrator if that username actually
exists in the users table
and then it'll check is administrator
equal to administrator if it is it will
evaluate to true
if it's not it'll evaluate to false so
if the username administrator does not
exist in the database
this will not output the text
administrator and so
uh that will not evaluate to be equal to
administrator and so we
end up getting false and true is equal
to
false so let's check if the
administrator user is in the database
and this type of sql injection is a
little bit trickier than all the other
types of sql injections just because
you're so limited in what you can do
and you're only a lot to ask true and
false questions
however once you understand how it's
done it becomes a little bit easier to
get through these exercises so we did
control u to url encode it
and hit send and we still get a match
which means that
the administrator user exists
okay so now let's try it with for
example
the user administrator and something
else a user that we know does not exist
in database because we put random values
and hit send
and we don't get a welcome back message
indicating that this user over here
does not exist in the users table
okay perfect the fourth thing that we
need to do
is enumerate the password
of the administrator
user and again what we could do over
here
is copy this put it in here
and say select the password
from the users table where the username
is equal to administrator
and check if this password is equal to
for example welcome
2021 exclamation mark however
this wouldn't be a very smart thing to
do this will work it will tell you
it won't you won't get a welcome back
message because that's not the
password of the user however it's not a
very smart thing to do because
all you're doing is literally brute
forcing the password which you already
can do over here so if you go to my
account
and put administrator
and then put wacom 2021
exclamation mark and hit login and you
get an invalid username or password
you performing this query is exactly
similar to you brute forcing it through
the ui
and so it's not very smart to do it that
way instead what we're going to do
is ask the application a series of true
and false questions
the first question is going to be is the
first character
of the password a if we don't get a
welcome back message
then we'll move on to the second
character we'll say is
the first character of the password b if
we don't get a welcome back message
we'll move on to c and then we'll move
on to d
and so on until we get a welcome back
message now once we get a welcome back
message assuming we get it for f we'll
move on to the second character of the
password and then we'll ask the
application
is the character a if the application
doesn't respond with a welcome back
we'll ask it again
is it a b if we don't get a welcome back
message we'll move on to c
and so on and so that's why we need to
script this
and we need to use burp intruder because
it ends up being a ton of requests
depending on how long the password is
so that's actually the second thing that
we need to do which is
determine the length of the password and
to do that
we're again going to ask the application
a
set of true and false questions so we're
going to say select users
from the users table where username is
equal to administrator
and password and the length of the
password
is bigger than one and then we're going
to say
is that equal to
administrator
and this is not users it's username
okay so let's see what this query does
over here so select the username
from the users table where username is
equal to administrator
and the length of the password is bigger
than one the output of this query is a
equal to administrator
if it is equal to administrator then it
evaluates to true
if it's not equal to administrator then
it evaluates to
false okay so we know for sure that the
length of the password is going to be
bigger than one so what we're going to
end up doing
is if this evaluates to true that means
that the password is bigger than 1 then
we're going to ask is it bigger than 2
and if it still evaluates to true then
we're going to ask is it bigger than 3
and then if that still evaluates
to true we're going to ask bigger than
four and so on until it no longer
evaluates to true and that's how we're
going to figure out the number of
characters
in the password so let's copy that and
put it in repeater
and hit send we should get a welcome
back message
and we don't which means that we did
something wrong
and i can see the mistake over here it's
because i never removed the other query
so let's remove all of that
and then paste it again and then do
control u to url encode it
hit send and we get a welcome back
message
telling us that the password is at least
bigger than one now let's try a much
bigger number
50 and hit send and we don't get a
welcome back message indicating that the
password is bigger than one but smaller
than
50. okay so you could do use a binary
search method
in order to figure out the password
length but what i'm going to do is i'm
literally going to brute force it using
intruder so i just sent this to intruder
go to positions clear all the positions
and the position then
that i'm interested in enumerating is
this one over here so let's put it back
at one
and then click add and we're using
sniper
go to payloads the payload that i want
to use is numbers
and it's going to be sequential because
i wanted to start with one two three
four
and then complete it until the end so
we're going to start from 1
and then go all the way to 50 because we
know for sure that it doesn't reach 50
and then the step count is 1 and what
that means is start off with 1 and then
add 1 to that so 2 and then add another
one so three so on so you end up with 50
requests at the end
and i'm going to click on start attack
okay so if you're working with the
community edition this will probably
take much longer to do than uh than the
one
i'm working with because i'm working
with the professional edition
all right so notice over here that the
length is 11403
for when you do get a welcome back
message so in this case we
said is a password bigger than one and
we got this length
and then we said is the password bigger
than two we still got the same length
and so on until we reach
20. so when we said is that password
bigger than 20 we got a different length
than all the other numbers which means
that we likely didn't get a welcome back
message over here
so let's search the response
and we didn't and so this confirms that
when we
said is the password bigger than 20
this evaluated to false and so the
password over here
is exactly 20 characters
okay so another way to filter on these
items
is to look at filter and you can only do
this with
the professional edition so
we'll filter on welcome hit apply and
it'll only show you the requests where
you got the long comeback message so in
this case up till 19 you got the welcome
back message
on 20 you no longer get the welcome back
message because it's not bigger than 20
characters it's exactly 20 characters
okay so now that we know the number of
characters in the password what's left
is to enumerate
uh the password and to do that we're
going to start off with the first
character again ask it is it equal to a
is equal to b
and so on until you loop through the all
the alphanumeric characters
and then once you're done you start off
with the second character
you'll loop through all the alphanumeric
characters until you get a welcome back
message and so on until
you reach all 20 characters and again
you're gonna need burp intruder for this
because that's a whole lot of requests
that you're going to be making
so let's close that discard it
go back to repeater and work from there
all right so to enumerate the first
character of the password
let's copy paste this put it over here
and what we're going to do is we're
going to use something called the
substring method
and it'll divide up the password
so the first character start with the
first character and
only one character from the user's table
where username is equal to administrator
and check if the first character of the
password is a if we get a welcome back
message that means the first character
is a
if we don't get a welcome back message
that means the first character is not a
so let's copy that
put it in repeater
and then ctrl u to url encoded
and hit send and we don't get a welcome
back message indicating that the first
character of the password is not
a now let's try all the other
alphanumeric characters so we're going
to send it to intruder to do that
again we go to positions clear all the
positions
and then highlight this one by clicking
add
in payloads we're interested in brute
forcer
and this checks all the alphanumeric
characters the minimum length and
maximum length is equal to one
because i wanted to try one character at
a time
and i'm gonna click on start attack
okay so we could see over here we know
we saw that a did not have the welcome
back message
and it has a length of eleven three four
two so we're looking for a different
length
and here we go so we could see at 5 we
get a different length
and if we look at the response of 5
we have a welcome back message so we've
enumerated that the first character
is five now we're going to do that for
the second character
and so on so instead of doing this 20
times what i'm gonna do
is i'm going to use so let's discard
this
i'm going to use a different type of
attack and that's called a cluster bomb
so instead of just having this as one of
our payloads we're going to add this one
as well so we'll add one
and then add a and then in the payload
so starting with one
i want the first one to be numbers
and it's going to be sequential again
from one two
20 because that's the number of
characters in the password and each time
i wanted to step
one one number and then for the second
payload which would be
this one over here i want to add
brute forcer and test out all the
alphanumeric characters
and again minimum length is one and
maximum length is one
because i wanted to try one letter at a
time
or one character at a time and then i'm
going to hit start attack
and you could see over here there's 720
requests
if you try doing it with the community
edition which i did
it'll take hours to run and so i
wouldn't recommend doing it using that
and if you don't have a professional
edition what i would do is just script
it in python which you'll see will only
take a couple of minutes
so we could start filtering out on the
welcome message
hit apply and you'll see over here
for the 10th character of the password
it's a
the fifth character of the password is b
the 17th character of the password
is b and so on so let's
order on this one and it doesn't order
correctly because
it doesn't see them unknown as numbers
it sees them as strings
okay that's fine so what i'm going to do
and it's done so what i'm going to do
is put this over here so you've got
1 2 3 4 5
6 7 8 9
10 11 12 13
14 15
16 17 18 19 and 20.
okay so we said the first one is five
let's confirm that it is
okay number 10 is a so we'll put that
over here
number 11 is 7.
number 12 is 4
number 13 is
9 so we no longer need spaces because
those will always be ordered
so 4 9 14 is c y
0 b 7
[Music]
6 and then we need number 20 which
is s
okay and then we'll start off with
two so two over here
is two number three is
r q
b j t
j p okay so that should be 20 characters
let's copy that and try to log
in as the administrator user using it
okay click on my account click on
administrator
and put in the password and hit login
okay it says congratulations you solved
a lot okay so we successfully completed
the exercise by using burp suite
professional now let's try and script it
okay as usual we start off by importing
assist library and the requests library
we also import url lib3
and we add this line over here to
disable any warnings we're going to get
from certificates
so url lib3 dot exceptions
dot insecure request warning
and then we're going to set our proxy
setting
so i usually like to debug my scripts
when they don't work and it's difficult
to debug them if you can't see the
requests
and so i send all my requests that are
done in the script to burp
so that i can see them in case something
does not work
properly so to do that we'll set http
and then https
okay the next thing we're going to do is
let's call the main method
and we'll define it over here all right
so function main
and then we're going to say if the
length
of the input when you run the program
is not equal to two
then i want to print the usage
instructions
so i'm going to say usage is equal to
the name of the program and then a url
and i also want to print the example
instructions just so that it's really
clear
and again name of the program and let's
say an example url would be
www.example.com
okay all right so the way i want to run
my program
is it would be script
dot py and it takes in one input and
that would be the url
of the application and so
assuming that we ran it correctly then
we'll assign the url to the input that
we used
when running the program and then we're
going to print
retrieving administrator
password
and then we're going to call the
function sqli password
url and that function will output the
password of the administrator and what
it'll do is it'll show you
in real time all the different
characters that it's trying and then
once it hits a character that
the application responded true to then
it'll set that character and move on to
the other character so let's implement
this function
over here so def sqli
password again it takes in the url
we're going to say that the password
extracted
it's just an empty string for now and
then we're going to use
two for loops and it'll make sense once
we implement them
so we'll first start with 4i in the
range
1 221 that's the number of
characters that are in a password and so
this range over here has to be one
number bigger
because it'll only test it for that
number minus one and so it'll test it
from 1 to 20.
and then we're going to say 4j in the
range
32 to 126
and that might seem odd to you and i'll
explain that
right now alright so
let's go to ascii table
and let's try to find a nice image of an
ascii table
this one should work
okay so you'll notice over here i
started with uh
32 and what that means is i'm starting
with the space
character and then i'm moving all the
way to 126
which is uh this sign over here so i'm
testing not only the alphanumeric
characters but also the special
characters as well
and the reason i do that is instead of
putting all these characters in an array
and then looping through that array what
i can do
is just use the decimal representation
of those characters
and then we'll convert them to ascii in
the sql payload because sql does support
that and once we do that it would be
equivalent to you
asking the application is the output of
this
equal to a and so on
so this will make a little bit more
sense once we
implement it so we'll start off with the
sql payload
and the one we were working with is this
one over here
and we're going to click on view and
toggle word drop
okay we're going to make slight changes
to this so we're going to say
we're going to put this in an ascii
function
and this variable over here would be
the value of i so 1 through 20
and this variable over here this this
value over here
will be the value of j so
between uh it'll test out all the
characters on it so let's do that over
[Music]
here
so i j and then we need to encode it
so sqli payload
is equal to url lib
dot parse dot quote and the
sql payload so we need to import this
over here
or url lib
okay and then the vulnerable
parameter is in the cookies so we're
gonna say
cookies is equal to and that would be
the tracking id
so if we go back to our request over
here
it would be tracking id
and the cookie is equal to
this over here
let's copy that
plus the encoded
sql payload
and then we also have another cookie
which is session
so let's put that in here and add the
value over here because if you don't
have the right cookies
you will be kicked out of the
application so let's copy that
put it in here and then we're going to
make a get request
it's a get request because it's a get
method that it's using
so you could see that over here
it takes in the url it takes in the
cookies to be equal to cookies
we're going to set verify to be equal to
false because i don't want to verify
certificates and then i'm going to set
proxies to be equal to proxy so that it
sends my request
through burp just in case we need to
debug it
and then we're going to say if you see
like a message so if the welcome message
is
not in our dot text so the response of
this request over here
then we want to output the character
that we're trying
we'll use carriage return
this ensures it starts at the beginning
of the line
plus the password extracted
and then we'll flush the output
and once we run the program you'll
understand what this does
now if we do get a welcome message
so in the else case then i want to add
that character to
my password extracted string so that's
plus equal to
and i want the character version of it
because right now it's
an ascii and then i'm going to say
sys.std out dot write
and again carries return plus
password extracted
and flush it one more time
and then break and what that does is it
ensures once we do get a welcome message
there's no need to try
all the different characters so all
these characters over here because we
already found the character for that
position
in the password and so there's no need
to try all these characters
instead we're going to break out of this
second loop and go back to the first
loop and move on to the second character
and this makes it
more efficient than burp suite
professional
all right let's save this this should
work hopefully we don't have any errors
let's run terminal new terminal
and this might be a little bit too big
let's see
and it is
sizing issues all right let's
close this and then run it
python3 sqlilab11.py
and we need the url of the application
which i believe must have timed out
let's go to home and it did so we're
gonna need a new instance
okay it loaded so let's copy that
put it in here now because it is a new
instance
the tracking id and the
session id likely changed and so let's
copy them
and put them in our script so that was
for session id
any added change and then tracking id
let's copy that and put it in here
save it one more time okay so instead of
running it for all the characters of the
password
i'm just gonna run it for the first one
confirm it's working correctly
and then get it to run on all 20
characters
so hit enter and we already have an
error on line 34.
and we misspelled that so let's save
that
clear this and run it one more time
and we get one more err
and we said this is equal to cookie so
let's save that
so this happens when you're coding on
the fly
hit enter and we get an error
okay so i've paused the video and
googled it and i think i know where the
mistake is
this does not have two brackets in it
so i think this is the issue because
everything else in my code looks good
so let's try it one more time okay
perfect
so it's running but i think we're
getting a connection timeout which is
why
and we are which is why this is not
working properly
all right so let's open up a new
instance
it took some time to resolve the error
go here access the lab
and we're going to need to change the
tracking id
and the sql payload so
view toggle wardrobe
tracking id over here
i'll put that in here and then the
session
is right over here
okay i'll save that take the new url
put it in here
let's go back to verb so that we could
see our requests in real time
and we'll start off here
okay and hit enter hopefully this should
work
so one thing that i'm noticing is that
i'm not seeing
the characters being displayed to me on
screen and i
i realize right now why it's because i
never put them over here so let's say
plus
character j and save it
so let's close this
all right let's do this one last time
hit enter
and here we go so you could see over
here it's
trying to enumerate the first character
and it's telling you all the different
characters that it's using so it started
off with
the special characters and now it moved
on to
numeric characters and now it's trying
the alphabets both capital
and lowercase
so we'll let it run until it finds its
first character in this case it was i
so what we're going to do right now
since it is working i'm going to put it
back to
121 and let it do its thing and
enumerate the entire password now since
this might take
about two or three minutes i will fast
forward the video so you'll see it play
in real time and enumerate the entire
password
but i'll fast forward the video so that
it takes what
10 or 20 seconds instead of 3 minutes
okay so it looks like it enumerated all
20
characters that definitely took more
than three minutes it took about
seven minutes i would say but it's still
much much faster than the
community edition of burp so let's copy
that and confirm that it is
our password so i'm gonna go to my
account
hit administrator
paste the password and click login
and here we go it says congratulations
you solved the lab
okay so to recap in this video we first
used burp suite professional
in order to exploit a blind based sql
injection with conditional responses
then we scripted the attack in python in
the next video we'll also exploit
a blind based sql injection
vulnerability except in this case it
will be conditional errors
instead of responses if you liked the
video hit the subscribe and share button
so that it reaches a wider audience
also comment below what you learned and
what you would like to see more of in
the future
thank you and see you in the next video