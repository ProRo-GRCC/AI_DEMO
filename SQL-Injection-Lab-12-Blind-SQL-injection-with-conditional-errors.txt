hi everyone welcome back to another
video
in the web security academy series
in today's video we'll be covering lab
number 12
titled blind sql injection with
conditional errors if you do not have an
account on the web security academy you
can get one by visiting the url
portswigger.net
web security and clicking on the sign up
button
i already have an account and i am
logged in so to access the exercise
i'm going to click on academy
go down
select the learning path go down
select sql injection go down one more
time
select blind sql injection
and then select the second lab in this
section
titled blind sql injection with
conditional errors
all right let's get started this lab
contains a blind sql injection
vulnerability
the application uses a tracking cookie
for analytics
and performs a sql query containing the
value of the submitted cookie
okay so we have the vulnerable parameter
is the tracking cookie
the results of the sql query are not
returned and the application does not
respond any differently based on whether
the query returns
any rows okay so because the results of
the sql query are not returned that
means we can't use union based sql
injection
and because the application does not
respond any differently based on whether
the query returns any rows we can't use
blind based sql injection based on
conditional responses
and that's because we can't
differentiate between a true response
versus a false response so we're going
to have to use a different method
so if the sql query causes an error then
the application returns a custom
error message okay so we're going to
have to use blind based sql injection
based on
conditional errors because we do get an
error when this week
query causes an error and we don't get
an error when the sql query is
well formatted okay so the database
contains a different table called users
with columns called username and
password
you need to exploit the blind sql
injection vulnerability to find out the
password of the administrator user
to solve the lab login as the
administrator user
so we have a few angles over here
the first is to output the
administrator
password by exploiting the sql injection
and the second is to log in
as the administrator user
okay let's access the lab right click
and open it this might take some time
so we'll create the analysis section
and in the meantime we're going to open
up burp because we'll need it
and i'm going to use the professional
version of burp just because it's much
faster when you're using burp intruder
but you can do everything that i'm doing
with the community edition all right
click next start burp
all right it looks like it loaded up so
let's put burp on the other side
go to the proxy tab intercept is set
to on next we need to configure our
browser to send requests to burp so
we'll do that using the foxy proxy
extension and selecting the
option burp now when we click on a
request it should be sent to burp so
let's click on home
and here we go we see it in verb so
click forward
intercept off go back to http history
and let's send this to repeater
okay so we'll be working from burp from
now on on because we need to send a ton
of requests and it becomes really
annoying to do that from the
browser okay so based on the exercise
the vulnerable parameter
is the tracking id cookie so what i'm
gonna do
is i'm gonna put a single quote and see
if i can break the query
so this single quote should interfere
with the sql query and
cause an error at the back end which we
should see
in the application so let's hit send
and here we go so we get a 500 internal
server error
now i'm going to try and
close that single quote and see if i
still get that 500 internal server error
hit send and i don't so i get the same
page that you would get over here if you
had just clicked on for example home or
my account
or whatnot okay so that's a good sign we
still haven't proved that it's
vulnerable to sql injection
although we have an inclination that it
is because when we try to break the
query with only a single quote we get an
error but when we close that single
quote we no longer get an error
so first step is to prove
that parameter
is vulnerable
okay and to do that we're going to be
using sql
code and see if it interprets it if the
application
interprets a sequel code in the back end
so so far we've added
two single quotes and we don't get an
error
so next let's add the concatenation
character
and use another query
so select empty string
and then concatenate that all right
let's copy this
and see if we get an error or if
we get a 200 response now this is a well
formatted sql query and so we shouldn't
get an error
so let's test it out
and then do control u to url encode it
hit send and we get an internal server
error which is weird because again this
is a well formatted sql query
and so what this indicates is maybe
we're not dealing with a mysql database
maybe we're dealing with
an oracle database because an oracle
database requires a from clause
in order for the query to be valid so
what i'm going to do is test that out
and say from the dual table which is
just a dummy table that we
can use and that's something we learned
about in previous labs
so if this doesn't give me an error that
means i'm dealing with an oracle
database
and that this is definitely being
interpreted as sql code and so
it's vulnerable to a sql injection so
let's paste this
ctrl u to url encode it
hit send and we don't get an error so
this indicates to me that we're dealing
with an
oracle database which is good to know
because this way we could
form our queries so that they have
oracle syntax
and it also tells me that this is very
likely vulnerable to
a sql injection and to confirm that what
i'm gonna do
is i'm going to try and get it to output
something from
a table that doesn't exist
so i should get an error on that because
that's a table that doesn't exist
in the database so ctrl b
to paste it and then ctrl
u to url encoded hit send
and here we go we get an error so this
confirms to me that we're definitely
dealing with
a sql injection all right so
the next thing we want to do is
confirm that
the user stable
exists in the database
and we'll do it exactly in this way so
let's copy this query over here
and say select nothing from the users
table
if the user's table doesn't exist it
should throw an error
if the user stable does exist it should
give us a 200 response
so let's copy that ctrl v
to paste it and then ctrl u to url
encode it
hit send and we still get
an internal server error which means
that we did something wrong
okay so what likely went wrong is that
this will
output an empty entry for each
entry in the users table so if the
user's table has
five entries so five usernames that
means this will be
outputted in five different rows which
might
break our query and so what i'm gonna do
is i'm gonna say
where row num
is equal to one and this ensures it only
outputs one entry okay let's copy that
paste it in here
ctrl u to url encoder
and then hit send and we get a 200
response which
indicates
that the users table exists
okay so the next thing to do is confirm
that the administrator
user exists
in the user's database
because that's a user that we want to
output the password so we have to make
sure that it exists before we try and
output the password
of that user now you might want to try
this
so select an empty entry from the users
table
where
username is equal to
administrator however this wouldn't work
because if the user administrator exists
in the database we get a 200 response
if the user administrator does not exist
in the database
it just doesn't run the select portion
of the statement so it doesn't give you
an
error either way and so you
can't tell whether that user actually
exists in the database or not we need to
be a little bit smarter
and we'll do that in a second but
let's test it out over here
so if you have a valid user it shouldn't
generate an
error and then even if you don't have a
valid user it also shouldn't generate a
syntax error and that's why you should
also get a 200 response
which makes it difficult to determine
whether this is actually a valid user or
not
so like i said we need to be a little
bit smarter
and the way to do that is to use the
case
expression in oracle so it's similar to
the if
else uh then statement and the way to do
that we're gonna copy this over here
is we're going to say if
the case when 1
is equal to 1
then perform a certain function
so let's leave that empty for now
otherwise
perform something else again we're going
to leave that empty for now
and then we're going to end it and then
say it's from
a certain table again we need the from
clause because
oracle databases always require it or
you get an error
okay so we're going to say select the
case when 1 is equal to one
then use the two car function
which is just simply an oracle function
that converts a number or a date to
string
and over here what we're gonna do is
divide by zero
so this is invalid so this should
generate an
error otherwise it's just an empty
string
so what we're doing over here is we're
saying when
one is equal to one which will always be
true then
perform this function with this invalid
parameter
and so you should get an error now if we
say 1 is equal to
0 then it shouldn't get to this function
at all it should get to the else
statement
and then it should output an empty
string
which means that we get a 200 response
because we don't get an error
so let's try that out first and then
we'll try the use case and then in a bit
i'll explain how we can use that
in order to determine if the
administrator user exists
in the users table so command v to paste
it
and then control u to url encoded
and hit send and we get a 200 response
good that means it didn't reach this
statement over here instead it reached
the else clause
next let's put one is equal to one
and hit send and we should get an error
perfect all right so now we have a way
of getting an
error based on whether this statement
over here is true or not
so we're going to use that to our
advantage to determine
if the username exists in the database
so in the from clause instead of using
duo which is our dummy table
we're going to say from users table
where username is equal to
administrator okay so in order to
understand
why this will help us determine whether
the username exists or not
you need to understand the order of
execution when it comes to sql queries
so the from clause is evaluated first
before the select clause
is so in this case when we say
from the users table where username is
equal to
administrator so if the username
administrator exists in the database
then perform the select section of the
query
if the username administrator doesn't
exist in the database
the select section of the query will not
be performed
so we're going to use that to our
advantage to determine if this is true
or not because
if the user's table exists and it has a
username that is called
administrator then it'll perform the
select portion of the query
and then the select portion says select
the case when one is equal to one
now one will always be equal to one and
so it will perform the
two car function which will try to
divide by zero and generate an
error now if the user administrator
doesn't exist in the database
it won't perform this portion of the sql
query and so
it will never perform the two car
function and so it won't
output an error so we'll try both use
cases to confirm that this
is correct so we'll first try with the
correct use case where the administrator
exists in the database so command
v and then control u to url encoded
and hit send and we get an internal
server error
and i'll put that on a new line which
means that
the administrator user exists
and again this is a bit difficult to
understand but the reason that works is
because
over here the users table exists and the
username
administrator exists in the users table
and so it'll perform
the select portion of the query which
says if one is equal to one
then do this otherwise do this and in
this case one is equal to one will
always be true and so it'll perform this
portion of the query which
should generate an error at the back end
and that's what we saw over here
now to confirm your understanding of
this let's try doing it with an
username that does not exist so let's
say
a random username we should get a 200
response
again don't forget to do control u to
url encode it
hit send and we get a 200 response
so let's make note of that
and that means user does not
exist in database
okay so why did that happen because when
it said that from
users where username is so and so this
username does not exist in the database
and so it didn't run this portion of the
query
and so it never had to run the to car
function so it never got an error and
that's why we get a 200 response
okay so we've confirmed that the
administrator user
exists in the database the next thing is
to
output the password of the administrator
user but before we do that we need to
first find out what the length of the
password
is so determine
length of password
and to do that we'll use exactly this
so from users where username is equal to
administrator
and the length of the password
is bigger than one okay
so again if the length of the password
is bigger than one and the username
administrator exists in the users table
then this will run
as well and we should get an error if
the length of the password is not bigger
than one then we shouldn't get an
error because this doesn't run okay so
let's try
that so we're pretty confident that the
length of the password has to be bigger
than one because you don't want an empty
password
so we should get an error ctrl u to url
encode it
hit send and we get an error which is
good so now let's try
a big number for example 50 and see if
we still get an
error if we still get an error that
means the length of the password is
bigger than 50.
if we don't get an error that means the
length of the password has to be smaller
than 50.
ctrl u to url encode it hit send
and here we go we get a 200 response at
50
which means length of password
is less than 50.
okay so we know that the length is
bigger than one but less than 50.
so we could try is it bigger than 2 and
if we get an error that means it's
bigger than 2
we could try then bigger than 3 if we
get an error that means it's bigger than
3
and so on until we get a 200 response
just like we did
450. however that is a lot of requests
and so
instead of doing it by hand we're going
to do it using
intruder so i'm going to right click and
select send to intruder
and then from there i'm going to clear
all the positions the only position
i'm interested in enumerating is this
one
so i'm going to click add and i'm going
to put it back to 1.
and then for payloads i'm going to click
numbers
and it's sequential i want it to start
from 1
to 50 because i know for sure that the
password is not bigger than 50
and then the step count is 1 and what
that means it'll increase by one each
time so it'll start with one and then
two and then three and so on and that's
why there's 50 requests in the request
count
and then i'm going to click on start
attack now you should be able to do this
with the community edition
it just will take a little bit longer
than the professional edition
so notice over here we get at one we get
a 500 response code because
it is bigger than one same goes with two
and so on so we're looking for a 200
response code and here we go
so we start getting a 200 response code
starting with the payload 20
and so when we did is the length of the
password bigger than 20
it gave us a 200 response code which
means know that the
length of the password is not bigger
than 20 and the reason is
because it's exactly 20 characters and
we know that because
at 19 characters we said is it bigger
than 19
then yes so we know for sure that it's
bigger than 19
but not bigger than 20 and that means
it's exactly 20 characters
okay so now that we know the length of
the password the last step
is to output the administrator
password and the way we're going to do
that is similar to this over here
and what we're going to do is we're
going to ask is the first letter
of the password equal to a if it is then
output an
error if it's not then output at 200
response and then we'll do that for the
second character third character and so
on until we've enumerated
all 20 characters so let's
build our query
so we no longer need the length because
we know the length of the password but
instead we're going to replace that
with the substring method which we used
in
previous labs so we're going to ask
if the first letter of the password
is equal to the letter
a okay so when this sql query is run the
first thing that is going to run is the
from clause which will ask from the
users table
is there a username that is
administrator and the first
character of the password equal to a if
it is then it'll run this
and when you run this it'll ask is it
the case that one is equal to one
it is and so it'll run the two-car
statement where you divide by zero and
you get an error
otherwise it will output an empty string
and so if the first character of the
password is not a we should get a 200
response if the first character
is a we should get a 500 response code
so let's copy that and test it
out in repeater first so discard this
go back to repeater
do control u to url encode it
hit send and we get a 200 response which
means
a is not the first character
of the password okay so instead of doing
this again by hand we're going to do it
using intruder
go to positions clear all the positions
and the one
i'm interested in enumerating right now
is this one
so click add instead of just trying a i
want to try
all the alphanumeric characters so i'm
going to click
on brute forcer and this tries all the
alphanumeric characters
when i'm length one maximum length is
one because i want to try one character
at a time instead of permutations of
those characters
and we've got 36 requests hit start
attack
and what i'm looking for is a 500
response code because
if we get a 500 response code that means
this
was true which resulted
in this being run so let's look for that
so they're all 200 so far and here we go
we get a 500 response code which means
that the first character
is w now the next thing we need to do
is try for the second character and then
the third character
and then the fourth character and so on
so instead of
doing that again 20 times in burp
intruder
i'm going to automate that portion as
well
all in one attack so in positions let's
clear one more time
and add this as a position
and then add this as a position as well
so for the first one over here
it'll be numbers so
numbers again from 1 to 20 because we
know there's only 20 characters in the
password
and we step one at a time so what this
will do is it'll
it'll try one and then two and then
three and
so on and then for the second payload
which
is this one over here so you have to
change it to cluster bomb
first of all over here the second
payload
would be the alphanumeric character so
i'm going to use brute forcer which
tries all the alphanumeric characters
and the minimum length is one
and maximum length is one because i want
to try one character at a time so you'll
see over here between the first payload
and the second payload there's 720
requests and so this would be very
difficult to do by hand
in the professional version of intruder
it's really fast
in the community edition it might take
hours to do
so if you don't have the professional
version
stick around and we'll script this in
python where it'll take minutes instead
of hours
okay so it's running so if you go down
these are all 200 response codes
we've got a 500 over here which means
that the
19 character of a password is b
okay so it looks like it finished
running what we could do is just order
by status
over here and
what it's going to do is it's going to
pull all the 500s first
so you could see over here at 14
at the 14th position of the password
we've got a b at the 19th position of
the password we've got to be as well
at the fourth position of the password
we've got a c
and so on so what i'm gonna do
is first of all filter
on only the 500 response code because
that's the one that i'm interested in
you won't be able to do that in the
community edition i believe that's only
available in the professional edition
so i'm going to click on apply and now i
can only see my 500
response codes and then i'm going to
order on payload so over here starting
with
one we've got a w which we already found
when we were doing it manually
in repeater and then at position
10 so i'm just going to put a few spaces
over here
at position 10 it was 6 and then
position 11 it was
s and so on so you've got assad h b
t f
zero c
b and then f
over here for position twenty and then
go back to position two it's
j f u c
four nine seven
w and l okay so this should be
our password let's copy it and try to
log in
using it so click on my account
for the username select administrator
for the password
paste the password and click login
and it says it's an invalid password so
we might have copied something wrong
so let's go back so we've got
w and then for the second one over here
we've got j and here we go
so i copied the f twice when it's only
supposed to be for position 20.
okay so this should work let's copy it
one more time
username is administrator
and the password is this one over here
hit login and here we go
it says congratulations you solved the
lab all right so we successfully
completed the exercise by using burp
suite professional
now let's try and script it using python
okay the first thing we do is import the
sys library
and the requests
library next we import
url lib3 and
url lib dot parse
because we're going to need that as well
and then we'll add this line over here
in order to disable any requests
warnings from certificates
so url lib3 dot disable
warnings and it's
url lib3
dot exceptions dot
insecure request warning
okay and then we're going to set our
proxy setting
so that any requests we make through the
script gets passed to our proxy and this
helps with debugging if the script
doesn't work as intended
so http 127.0.0.1
8080 and then we'll do that for
https as well
127.0.0.1
and again 8080.
okay that looks good next
let's call our main function
so if name is equal to main
then call the main function so this will
run when you run the program
which will run the main function over
here
and the way i want my script to run is
it would be script ui so the name of the
script and then you give it a url
and then it exploits the sql injection
in order to output the password of the
administrator
so it only takes in uh one parameter
which is the url
so we're gonna say if the length of the
arguments
so sis.rgv is not equal to
2. so that would be the name of the
program and the url string
then i want you to print
usage instructions so name of the
program
and then url because you're not running
it correctly so i'm giving you
instructions on how to run it instead of
giving you an error which doesn't look
too pretty
so this is the name of the program all
right
and then i want to give you example
instructions on how to run it as well
just to make it a little bit clearer
so example would be the name of the
program
and then for example the url could be
www.example.com
okay and then exit the program because
you ran it incorrectly
all right so assuming you did run it
correctly i'm going to assign the
parameter
so the url parameter to the variable url
over here so we'll take that from
the argument so it would be argument one
and then
i'm going to print
retrieving
administrator
[Music]
password
and then i'm going to retrieve the
administrator password using the
function
sqli password url
all right so let's implement that
function over here
so def sqli
password and again it takes in the url
we're going to create a variable called
password extracted
which is empty for now but it'll save
the password
the characters of the password as we
extract them because we're extracting
them one by one just like we did with
the requests over here
next i'm gonna say for i in the range
1 2 21 and the reason we use 21
is because it'll go to that range minus
one
and so it'll try one two three up till
20 instead of up till 21.
okay and then i'm going to say 4j
in range 32
to 126. okay and i'm using ascii
characters over here we've explained
that in the previous lab however if you
haven't
watched that video i'll explain it again
so let's google ascii table
click on it
okay here we go so instead of creating
an array that has all the alphanumeric
characters in it
so what i'm going to do is i'm going to
use the decimal
number that represents that character so
we start off with 32
which over here represents a space and
then we go all the way to 126.
which is over here represents
this sign over here so we try not only
the alphanumeric characters we also it's
also case sensitive and we also try all
the special characters as well
okay so i'm going to close that right
now
next we're going to set a variable
called sql payload
and that's the sql payload that will
exploit
the sql injection so we'll get that from
over here
so let's copy that
paste it okay so
we've got two variables over here this
is the first one
so preset sign s and this is the second
one
okay and the first one will be replaced
by
i and then the second one will be
replaced by j so what this is going to
do
is is it'll start with the first
character of the password so
the first position which is the first
character one and then it'll try
all the characters in this range until
it finds one and then it'll move on to
the second
position of the password so the second
character and so on okay
the next thing we need to do is url
encode
our payload so let's say encoded
and that's where we use this library
over here which is why we needed to
import it
okay so it would be url lib dot parse
dot quote
and that would be the sqli payload
okay next we need to set the cookies
so there were two cookies that we were
using so if we go back to
repeater there was the tracking id
cookie so let's copy that
which was equal to this over here
and we want to add our sql payload to
that so sqli
payload encoded similar to what we were
doing
over here next we need to add the second
cookie which is
the session cookie because the
application won't function properly
without it so let's copy that
put it over here okay
and then we make our requests so it
would be r
is equal to requests.gap and the reason
we use get is because
it makes a get request over here and
it would be the url cookies
equal to cookies so the one we just the
ones we just sat
and then verify to be equal to
false we don't want to verify
certificates and proxies to be equal to
proxies so that all the requests that it
makes get sent to my birth proxy
in case i run into errors and i need to
debug it
and then i'm going to say so let's put
that up
if r dot status code
is equal to 500
then i found one of the characters of
the password so i'm just going to add it
append it to the password extracted
variable
and we use the chr method so that it
converts it from ascii back to a
character
and then we're going to output it to the
screen so
dot write carriage return
plus password extracted
and then we'll flush it
and then we'll break so if we found a
character we're going to
get out of this for loop and move on to
the second position
and the password so the second character
and then the third character and so on
this makes it a little bit more
efficient there is obviously much more
different ways to make it efficient for
example
using the binary method which we're not
going to cover today
so otherwise you didn't find the correct
character and we need to continue
however i wanted to display it on the
screen all the characters that it's
trying
and that's why i'm using the std out
over here
so carriage return to return to the new
line and then password
extracted so so far what we've extracted
plus the character that it's trying
and we flush it again
okay all right here we go so it should
show me all the characters it's trying
if
if it finds a character where we get a
500 response code then it adds it to
password extracted
and then it moves on to the next
character and so on until
it goes through all 20 characters so
let's save that
go to terminal new terminal
and see if it runs correctly so that
would be python3
sqli lab
12 dot py
and this might have timed out so let's
click home
and it did okay so we don't want it to
be it we don't need it to be intercepted
by burp anymore so i'm going to turn
that off
close this and create a new instance of
the lab
and when we do create a new instance we
do have to change the session
and the tracking id cookies so we're
going to have to do that
so let's remove that remove this one as
well and we'll update them once we have
a new session okay looks like it opened
up
i'm gonna use my cookie editor extension
to do this
but you could do this with burp or the
browser tools
so that's for session
and i copied that twice next we'll do
that for tracking id
and see if we get any errors so ctrl s
to save it and then we need the url
let's copy that
paste it and hit enter
okay so now it tells you what it's
trying
and once it finds the first character
it'll move on to the second character
and so on so it's trying numbers right
now
it tries then more special characters
and then
capital letters and then it'll try the
lowercase letters until it finds one
now this is going to take a couple of
minutes so it could take from
two to three minutes up till 10 minutes
it's still faster than burp
however i'm not gonna make you wait all
this time
and so i'm going to fast forward the
video so that it takes
maybe 20 seconds instead of you having
to watch the screen
for four five to ten minutes
okay so it looks like it's running
through all the characters
again which means that we have an error
in
in our code so i'm going to stop this
because this is not being done
right and i'm going to go back to see
where the error
is and i know what i did wrong
over here we're giving it the first
character of the password we're asking
is the first character of the password
equal to this variable over here
now this variable is an ascii however
the first character of the password is a
character and so we need to convert this
to
ascii in order for it to do a proper
comparison and then they will be equal
and at some point you should get the 500
response code so let's save this and try
it again
and this should work
and again i'm going to fast forward it
until we find the first character
once we do we'll fast forward it on all
the other characters
okay and we get an error l which means l
is the first character however i know
the issue over here at line 20 i spelt
that incorrectly
so if you go line 20 over here it's chr
instead of c-h-a-r
okay let's make sure so this is done
correctly over here
that's good all right so we shouldn't
get any more errors
let's try again
and again i'm going to fast forward
right now until we've enumerated the
first character which should be an l
based on how it ran the first time
around
okay so we're getting closer right now
and here we go it's actually an m
because
that comes right after an l and that's
why it threw an error before
but this looks good so it's in
enumerated the first character and now
it enumerated the second character and
it's trying the
third character and so on so i'm gonna
fast forward this until we've enumerated
all 20 characters and then we'll try to
log in with that account
okay it looks like it completed so let's
copy
this and try to log
in with this password
to the administrator users account so
click on my account
click on administrator paste the
password
hit login
and here we go it says congratulations
you solved the
lab okay so we've successfully completed
the exercise
to recap we first exploited a blind
based sql injection with conditional
errors using burp suite professional and
then we scripted it using python
in the next lab we'll start looking at
time-based sequel injection
if you like the video hit the subscribe
and share button so that it reaches a
wider
audience also comment below what you
learned and what you would like to see
more of in the future thank you and see
you in the next video