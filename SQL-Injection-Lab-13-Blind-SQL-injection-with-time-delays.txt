hi everyone welcome back to another
video
in the web security academy series in
today's video we'll be solving lab
number 13
titled blind sql injection with time
delays
if you do not have an account on the web
security academy you can get one by
visiting the url portswigger.net slash
web security
and clicking on the sign up button i
already have an account
and i am logged in so to access the
academy i'm going to click
on academy
scroll down select the learning path
scroll down select sql injection
select blind sql injection
and then select blind sql injection with
time delays
all right let's get started this lab
contains a blind sql injection
vulnerability
the application uses a tracking cookie
for analytics
and performs a sql query containing the
value
of the submitted cookie okay so the
vulnerable parameter over here
is the tracking cookie
okay so the results of the sql query are
not returned and the application does
not
respond any differently based on whether
the query returns any rows or causes and
error
because the results of the sql query are
not returned that means we can't use a
union based sql injection
and because the application does not
respond any differently based on whether
the query returns any rows or causes an
error we can't use any of the blind sql
injection techniques that we've used in
previous labs
next the exercise says however since the
query is executed
synchronously it is possible to trigger
conditional time delays to infer
information to solve the lab exploit the
sql injection vulnerability to cause
a 10 second delay okay so we could use
time-based sql injection
in order to exploit the sql injection
vulnerability
so we've got one end goal over here
and the end goal is to
prove that the field
is vulnerable to blind based
sql injection and it's time based
all right let's access the lab
and this might take some time so we'll
create our analysis section
we'll also open up
hit okay
close that select next start burp
and we'll put that over here and make
that a little bit smaller
and then we'll set foxy proxy to send
requests to birth so now when we hit
home it should be
intercepted by burp which we can see
over here so let's send that to repeater
and turn intercept to off and go back to
repeater
and move that over here
okay so our vulnerable parameter is the
tracking id over here
so we need to inject sql code that
causes a
10 second delay and if we're able to
cause that 10 second delay that means
this is vulnerable to a time-based blind
sequel injection
now to do that we're going to go back to
the exercise and look at the hints
section
open up the chi chi
and go down to the time-based queries
so over here time delays you can cause a
time delay in the database when the
query is processed the following will
cause an
unconditional time delay of 10 seconds
so the reason we're looking at the cheat
sheet is because we don't
know which database we're dealing with
so what we're going to do
is we're going to fuzz the application
with
all the different payloads and see which
one it responds to
and then depending on the one it
responds to that means we're dealing
with that database
so let's start off with the end by first
trying out a mysql database
so we'll put that over here now in order
to
properly exploit this we can't simply
add this to
the tracking id instead we'll have to
add a single quote which
closes the single quote that this string
was in
and then we'll add the concatenate
clause to concatenate
this query over here and we'll add curly
braces
to the queries let's see if this works
ctrl u to url encode it hit send
and we immediately get the response so
it definitely didn't sleep 10 seconds
because even when we don't put that
you'll see that the time it took so we
moved a little bit too much
so ctrl u to url encoded let's just test
this again
here we go so it takes 136 milliseconds
and then when we remove it hit send
it takes 131 milliseconds so it
definitely didn't take 10 seconds
and which means that it didn't interpret
this as sql code which means that
it's likely either that we use the
incorrect syntax
or this is not the database that we're
dealing with so let's just put an
x sign beside this one so maybe it's not
a mysql database
let's try a different database
so let's try postquest sql next
and again we gotta format it correctly
so that
it doesn't break that back end query
let's copy that put it into burp
ctrl u to url encoded
hit send
and it looks like it still doesn't sleep
10 seconds
however i'm noticing right now that we
did something incorrectly over here
so what's happening is that the query is
likely something similar to this
so select tracking id
from tracking table
where tracking id
is equal to this tracking id over here
so in order to properly inject our sql
payload into this
what we're doing is we're closing off
the single quote over here and then
we're adding
our payload now
the problem with this is that we still
have a single quote
that is unclosed and then we've got the
semicolon
so what we need to do is comment out the
rest of the query and this way
this ends up being a valid query so we
did that incorrectly over here and that
might be the reason it didn't work so
let's try
that out
so ctrl u to url encoded
hit send and we get the request almost
immediately and so this is still an x
it's not
a mysql database now let's try with
postgresql
again don't forget to comment out the
rest of the query
ctrl u to url encoded
hit send and here we go so we can
definitely see there is a delay in the
response
and it should be a 10 second delay so
this is definitely vulnerable to
a blind based sql injection the 260
milliseconds is the original request
and then the 10 000 milliseconds which
is 10 seconds
is the delay that we cause in our sql
payload so this is definitely vulnerable
to sql injection
and if we go back to the exercise it
should tell us that we've solved
the lab and here we go it says
congratulations you solved the lab
okay so we successfully exploited a time
based blind sql
injection by manually doing it using
burp
now let's try and script it so as usual
the first thing that we're going to do
is import the sys library
next we'll import requests
url lib3
and url lib because we'll use those in
our script
and then we need to call the main method
and implement our main method over here
so the way i want my script to run is
i'm going to say script
dot py so the name of the script and
then i give it the url
and then what it's going to do is it's
going to try and inject
a 10 second delay and then it'll check
the response time if the response time
is bigger than 10 seconds then we've
successfully exploited the sql injection
if the response time is less than 10
seconds that means we fail to exploit
the sequel injection
so over here we're first going to check
if we gave it the correct number of
arguments
so not equal to 2 which is the name of
the program
and then the url that we want to exploit
next we're going to print the usage
instructions
so says.argv
zero which is the name of the program
next we'll print an
example of the usage instructions
again name of the program and then let's
say the url is www.example.com
and again name of the program
okay next because we ran the programming
correctly we're going to
exit it
all right so that's if you ran the
program incorrectly if you did run it
correctly
i want to save the url in the parameter
called url
so that would be the first argument that
you give to the
program and then i want to print
checking if tracking
cookie is vulnerable
to time based
blind sql injection
and then i'm going to call a function
called blind sqli
chat url
and what this function does is it tries
to exploit the time based blind sql
injection
and if it's successful it'll report that
the exploitation was successful if it's
not successful it'll exploit that the
exploitation was not successful
so let's implement that function
again it takes in the url
we'll first set our sql payload
parameter
so that would be the one over here
let's copy that put it in here
next we need to url encode it so let's
say sql payload encoded
is equal to url parse
dot quote and then
the sqli payload
okay that looks good
and i don't know why it added that we
don't actually need it
here we go
okay then let's set the cookies for the
request
so we can get those from the
burp request so you could see that over
here we've got two cookies the tracking
id which is this one over here
let's copy that
and then we also have another cookie
called the session cookie
and it's this one over here
now in order to exploit the time based
line
sql injection we need to inject our
payload in the tracking id
and so we're going to add it over here
sqli payload encoded
and here we go so these are the cookies
that we need
next we need to make the requests so
it's a
get request and the reason i say get is
because you could see it over here it
uses the gap method and then it takes in
the url
cookies to be equal to cookies
verified to be equal to false because we
don't want to verify certificates
and proxies to be equal to
proxies and that's something i forgot to
do at the beginning
so i always configure my scripts to go
through burp just in case i need to
debug my script and i forgot to add that
over here so let's say proxies is equal
to
http
http 127.0.0.1
8080 and we'll do the same thing for
https
okay so now when we make this get
request it passes through burp
first and then it gets up to the
application and then the
response passes through verb first and
then gets sent to my script and this
allows me to debug my script
in case uh something goes wrong and i
don't know why it's not working
the way it's intended all right so we
made the request next what we're gonna
do
is we're going to check if the
time of the response so we'll say total
seconds
is bigger than 10.
now we do have to convert this to
integer
let's say that so if the response time
is bigger than 10
seconds then i want to print
that it's vulnerable to blind
based sql injection
however if the response time is less
than 10 seconds
then i want to print
not vulnerable
to blind based
equal injection
okay so this is a relatively simple
script because
all the exercise asks us to do is to
prove that
it's vulnerable or to prove that it's
not vulnerable
we don't actually have to extract any
information from the database
which is something that we'll do in the
next lab
so our script is relatively simple so
let's save that
okay so before we run it we very likely
timed
out of this session so let's test that
out over here
and it is taking time which means that
it did time out so i'm going to close it
make sure that proxy is turned off it is
and just open up a new instance of the
lab
because it is a new instance the cookies
change so i'm going to use my cookie
editor in order to copy this session
i'll also use it to copy the tracking id
let's copy that and put it in our script
next let's save the script and run it so
terminal new terminal clear that
and make this a little bit smaller here
we go
so hopefully we don't have any errors
let's run python3
sqli lab13
dot py and then the url of the program
so let's copy that
paste it and hit
enter so we're still getting in
a warning which we shouldn't because we
disabled warnings over here
and we actually forgot to do that
okay so our script works because it did
say it's vulnerable to blind based sql
injection but we forgot to disable
warnings
and that makes the output look not too
pretty
so let's do that over here url lib3
dot exceptions dot insecure
request warning and there's no curly
brackets
so let's save that clear it and run it
one more time
so now you shouldn't see any warning
text and we don't so it's taking some
time because
if it is vulnerable to a blind based sql
injection then it will take 10 seconds
to
run and here we go it says
it's vulnerable to blind based sql
injection
okay to recap we first manually
exploited
a blind based sequel injection by
causing a time delay
in the application and then we scripted
it in python
in the next lab we'll take this a step
further and use this time-based sql
injection
in order to output the password of the
administrator
if you liked the video hit the subscribe
and share button so that it reaches a
wider audience
also comment below what you learned and
what you would like to see more of in
the future
thank you and see you in the next video
you