hi everyone welcome back to another video 
in the web security academy series in  
today's video we'll be covering lab number 14 
titled blind sql injection with time delays  
and information retrieval if you do not have 
an account on the web security academy you can  
get one by visiting the url portsweger.net slash 
web security and clicking on the sign up button i  
already have an account and i am logged in so to 
access the exercise i'm going to click on academy  
go down select the learning 
path select sql injection
go down select blind sql injection and we're 
covering lab number four in this section titled  
blind sql injection with time 
delays and information retrieval  
all right let's get started this lab 
contains a blind sql injection vulnerability  
the application uses a tracking 
cookie for analytics and performs  
a sql query containing the value of the submitted 
cookie so we've got the vulnerable parameter
is the tracking cookie the results of the sql 
query are not returned and the application does  
not respond any differently based on whether 
the query returns any rows or causes any error  
so similar to the previous lab because 
the results are not returned we can't use  
union based sql injection and because there's no 
difference between how it responds on whether the  
query returns any rows or not we can't use any of 
the blind based sql injection techniques that we  
learned in the previous labs however since the 
query is executed synchronously it is possible  
to trigger conditional time delays to infer 
information okay so because the query is executed  
synchronously and it's possible to trigger 
conditional time delays that means we can use  
a time-based sql injection technique next it 
says the database contains a different table  
called users with columns called username 
and password you need to exploit the blind  
sql injection vulnerability to find out 
the password of the administrator user  
to solve the lab login as the administrator 
user okay so we have a few angles over here
the first one is to exploit a time-based blind 
sql injection to output the administrator  
password the next one is to log in as the 
administrator user okay let's access the lab
and this might take some time so 
we'll create our analysis section
and we'll also open up burr so i'm going to use 
the professional version of burp for this exercise  
because the intruder portion of that version 
is much faster than for the community edition  
however everything that i do in the professional 
edition you should be able to do with the  
community edition it's just going to take a 
much longer time to do than it would have if  
you use the professional edition say next and 
then start burp okay let's make that smaller
put it over here and then set our browser 
to send requests to burp so now when i hit  
home it should send it to my proxy and it 
did so let's send that to repeater because  
we're going to be making a ton of requests set 
intercept to be off and we'll work from repeater
okay so the first thing we need to do is confirm
that the parameter
is vulnerable to sql injection and we 
learned how to do that in the previous  
lab so we said it would be a single 
quote concatenation and then we'll use
either select pg sleep and then we'll 
make it sleep let's say 10 seconds  
and then comment out the rest of the 
query so you could either do that or  
you could also just do pg sleep that should 
work as well so let's test it out and see  
if it takes at least 10 seconds to respond if 
it does that means we induced a time delay which  
means that it's vulnerable to time-based 
sql injection so hit send and it's waiting
and here we go so you could see over here it 
took a little over ten 000 milliseconds so a  
little over 10 seconds so we've confirmed 
that it's vulnerable to sql injection  
the next thing to do is to confirm that 
the users table exists in the database  
okay and the way we're going to do that is we're 
going to ask the application true and false  
questions so we're going to ask the application 
does the user's table exist in the database  
if it does then sleep 10 seconds if 
it doesn't then don't sleep 10 seconds  
and so if the application sleeps 10 seconds 
then we know that the question that we asked it  
is true and to do that we're going to use a 
technique that we used in previous labs so  
let's copy all this okay so let's say select case 
when one is equal to one that's our true use case
then
pg sleep 10 seconds else we'll say pg sleep minus 
1. so if you use a negative number it just won't  
cause a delay at all so when the use case is 
true i want it to sleep 10 seconds otherwise  
don't sleep at all and because this is a sub query 
we're gonna have to put it into curly brackets and  
this would should work over here so let's copy 
that put it in repeater ctrl u to url encode it
and hit send so this did not work because you 
could see over here it only took 278 milliseconds  
although the use case over here 
is true so we did something wrong  
and i'm realizing right now what we did wrong 
so it's select case when the use case over here  
then pg sleep 10 seconds otherwise pg sleep 
minus one and you have to end it using the  
end keyword so let's do that 
copy it paste it into repeater
ctrl u to url encode it hit send and here 
we go it says it's waiting which means  
that it slapped 10 seconds so the response 
time took a little over 10 seconds to execute  
so we've got a valid query over here now let's try 
one is equal to zero so what we did over here is  
one is equal to zero this is a false use case so 
this should output false which means it should  
go to the else clause and it shouldn't sleep at 
all so let's send that and confirm that that's  
true and here we go we get our request almost 
immediately perfect so now we have a way to ask  
the application true and false questions and we're 
going to do that by asking the application if the  
users table exists in the database so we're 
going to say select the case when username
is equal to administrator 
and we'll say over here from  
the users table so what we're doing over here is 
we're confirming that one the user stable exists  
but we're also confirming that the 
administrator username exists in the  
users table so if it sleeps 10 seconds that means 
both of these conditions are true if it doesn't  
sleep 10 seconds that means they're false so 
let's paste that do control u to url encode  
send and it's waiting which is a good 
sign that means that the user's table does  
exist and the administrator user is a user in the 
users table okay and again it took a little over  
10 seconds to execute which means that we asked 
it a true use case so the next thing we're going  
to do is enumerate the password but to do that 
we first have to enumerate the password length  
and again to do that we're going to ask it 
a true or false use case so we're going to  
say select the case when username is equal to 
administrator and the length of the password
is bigger than one if both of these are true  
then sleep 10 seconds otherwise don't sleep 
at all so let's copy that and paste it
do control u to url encode it hit send 
and it's waiting so that means that the  
administrator user exists in the users table and 
the length of the password is bigger than one  
okay so again it took a little 
over 10 seconds so let's try 25  
and see if that works so that would be 25 over 
here hit send and we get that response almost  
immediately which means that the password 
length is bigger than one but less than 25  
so what you could do is test each number manually 
however this might take some time so i'm going to  
send it to intruder and automate the task for 
me so send to intruder go to positions clear  
everything the position that you're interested in 
is this one over here so let's put it back at one
add it and then in payloads use numbers and it's 
sequential so from 1 to 25 because we know it's  
definitely not bigger than 25 and the step count 
is one so increase increment by one each time  
and then in resource pool we're going to 
remove that because we don't want it to  
use 10 concurrent threads because it'll mess up 
with our time-based sql injection so it has to  
use one thread at a time and i believe the 
way to do that is create new resource pool  
and set the maximum to be one thread and 
start a tag so this is going to take some  
time because it will sleep 10 seconds each 
time until it reaches a false use case and so  
i'm going to fast forward the video until it's 
done and then we'll continue with the exercise
okay it's done let's click on columns and then 
click on response received and here we go so this  
gives us the response time and you could see over 
here it's all larger than 10 seconds so we need to  
look for the instance where it's no longer larger 
than 10 seconds and it's at 20. okay so this tells  
us that when we said the length of the password 
is bigger than 19 it slapped 10 seconds which  
means that's true but when we said is the length 
of the password bigger than 20 it didn't sleep 10  
seconds which means that this statement is false 
and so the length of the password is exactly
20 characters okay so now that we've enumerated 
the length of the password we need to enumerate  
the password so enumerate the administrator 
password and we'll do that in the same  
fashion so let's copy this and we're going to ask 
username is equal to administrator and substring  
of the password 1-1 so the first 
character of the password is equal to a  
if it's equal to a then sleep 10 seconds 
otherwise don't sleep at all so let's close this  
discard it go back to repeater and test this out
ctrl u to url encoder hit send and we get the 
request almost immediately which means that a  
is not the first character of the password now 
i need to check all the alphanumeric characters  
until it actually sleeps for 10 seconds instead 
of doing this manually we're going to do it again  
using intruder so right click send to intruder 
in intruder go to positions clear everything  
over here i'm going to make it sleep five seconds 
instead of 10 because it's taking a really long  
time to complete this exercise and then i'm 
going to add this as a variable go to payloads
select brute forcer and this allows us to brute 
force the alphanumeric characters minimum length  
is one and maximum length is one because i wanted 
to test out one parameter at a time and then click  
on start attack okay go to columns response 
received you could see over here the response  
is less than 10 seconds so that's not our first 
character let's go down until we get a 10 second  
until we get a five second response actually 
because we switched it up if i'm not wrong
yep we said sleep five seconds okay so let's go 
back to the results and you could see over here  
at zed it slept five seconds same goes for four 
two seven six and i think i know the issue over  
here let's go to resource pool and yeah we were 
doing 10 resources at a 10 threads at a time which  
is incorrect and so we're going to get incorrect 
results so we needed we need to do it one thread  
at a time for it to work so let's rerun this so 
go to attack and then repeat and then columns
response received and you'll notice over 
here the response is less than 10 seconds  
so we're looking for something 
that is bigger than 10 seconds
and you could see it paused which means we likely 
got it and here we go so again i keep forgetting i  
put it to five instead of ten so we're looking for 
something that is bigger than five seconds and if  
you notice over here this is the only one and so 
the first character of the password is one now i  
wanna enumerate the second character and the third 
character and so on until i've enumerated all 20  
characters instead of doing that in intruder 
20 times what i'm going to do is close this  
discard it and discard this one as well 
i believe i've done it multiple times  
go back to positions clear it 
and add two positions so this one  
so the character of the password and then the 
character that we want to try out and we're going  
to use cluster bomb in payloads for the first one 
it's going to be numbers and again from 1 to 20  
because we only have 20 characters and we 
increment by one each time and then for the  
second payload it's going to be alphanumeric so 
brute forcer alphanumeric characters and minimum  
length is one maximum length is one and here we go 
we've got 720 requests let's go to resource pool  
make sure it's one thread at a time and then start 
it up so this is going to take quite some time  
because we've got 720 requests and so i'm going 
to fast forward the video until it's completed  
and then we'll continue with the exercise and 
we're back so it looks like it's going to finish  
soon so let's click on columns select response 
received so that we could see the response time  
i wonder if there's a way to filter out on the 
response time it doesn't look like it so let's  
cancel this and just order by response time so 
anything that took bigger than five seconds that  
means it's a valid character so for example the 
sixth character of the password is o the sixteenth  
character is d and so on so i'm going to see if i 
could maybe highlight these and i should wait for  
it to finish and it just did because i want to 
be able to order them okay so we've got 600 500
okay and it looks like i got more results 
than i need and that's not a good sign oh  
and i didn't copy it correctly 
all right so let's highlight it
and here we go so that's bigger than 
five seconds right click highlight
i'll just say this and then
only show the highlighted items apply and i 
wonder if i can make this a color that is a  
little bit easier on the eyes and i don't know how 
to do that okay so it only does it for one of them  
so let's maybe select everything 
again and change the color
okay let's go with yellow okay 
so now let's order on the payload  
okay so starting off with the first 
payload we set the first character  
as one and then we're looking for the 
second character over here so that's three  
and then the third character i fourth 
character is p fifth character is n o b seven  
l and then we're looking for character 
number ten so that's 2. number 11  
is d and then you've got k j p 3 d r r y 
and number 20 which is y over here okay  
let's highlight this copy it and see if we could 
log in to the administrator account using it  
so and username is administrator 
password let's paste this and hit login  
and here we go it says congratulations you stopped 
the lab okay so we successfully exploited a time  
time-based blind sql injection in order to 
output the password of the administrator user  
from the database using burp suite professional 
now if you don't have burp suite professional  
you could always script it with python 
which is what we're gonna do right now  
so first let's save this and then the first 
thing we do when it comes to our python script is  
import our library so we'll start out with the ss 
library and then we'll import requests url lip3
and then url lib so we'll use 
all that in our script and  
we'll add this line over here so that we don't 
get any warnings when it comes to certificates  
so you're a lib3 dot exceptions 
dot insecure request warning  
and it does not have curly brackets next let's 
set our proxies setting so that would be http
and then we'll also do it for https
okay so what that does is it ensures that 
anything in the script gets sent to birth first  
and then to the application and any response 
from the application gets sent to burp and  
then to my script and i do that because it 
helps me debug my script in case something  
is not working properly it allows me to 
see the requests that the script is making  
so the next thing we're going 
to do is call the main method
so that would be main next 
let's define our main method
so the way i want to run my script is as usual it 
would be script dot py so the name of the script  
and then it takes in the url as the parameter 
so if the length of the parameters is not equal  
to 2 so the name of the program and then the url 
that we want to exploit then i want it to print
the usage instructions
so the name of the program and then url i 
also wanted to print example instructions
so again name of the program and then the 
url could be for example www www.example.com
and again name of the program
okay and because you didn't 
run the program correctly  
i want to exit it all right so assuming 
you ran the program correctly i'm going to  
save the command line argument 
into a parameter called url
next i'm going to print retrieving
administrator password
and i'm going to retrieve the administrator 
password using the function sqli password and it  
takes in the url all right so what this function 
will do is it will exploit the time based sql  
injection and retrieve the administrator password 
so let's implement this function over here  
so sqli password takes in the url i'm going to 
create a variable called password extracted so  
this is the list of characters that we so far 
extracted from the password of the administrator  
so it's empty at the beginning and then i'm going 
to create my for loops so for i in the range  
1 to 21 so this will check the first 
character up to the 20th character  
and then i'm going to say for j in range 32 to 
126 and again we've done this in previous labs  
but if you haven't watched those videos what 
i'm doing over here is just using the ascii  
version of the character so over here you could 
see that the space is the space character is  
represented by 32 and then you've got over here 
for example the capital a is represented by 65  
and so on and so instead of creating an array 
that contains all these characters i'm just gonna  
loop through the ascii version of those characters 
and i'm able to do that because there is an ascii  
function and uh sequel that i can use in order 
to compare with the characters okay so we start  
off at 32 which is this space and then we move 
all the way to 126 which is this character over  
here so it tries the case sensitive characters 
and the numbers and then special characters so  
we don't need this anymore i'm going to close 
it okay next we're going to set our sql payload
and we'll get that from 
over here so let's copy that
put it in here i'm gonna move this 
so it says 10 seconds right now
this would be a variable and same goes with this 
one over here so we'll replace those with i and j  
and what that means is for each character of the 
password which is i over here it'll try all the  
letters that we just saw in the ascii table it'll 
compare them so in order to properly compare them  
i mentioned something called an ascii function 
so we'll do that over here so it would be ascii  
and the substring function all right so what this 
does the substring function extracts the character  
ascii function converts it to ascii and then it 
checks is it equal to this ascii number over here  
if it is then sleep 10 seconds otherwise don't 
sleep 10 seconds all right next we need to  
url encode it so let's make this a little bit 
smaller so that we could see more of the code  
here we go so sql payload encoded is equal to
urlip.parse
and it's the sequel payload
okay and then we're gonna set our cookies to be 
equal to the tracking id cookie which likely timed  
out right now so i'm not gonna copy it but then 
we also have a second cookie so if we look at burp  
and go back to repeater you'll see over here 
we've got a tracking id and a session cookie  
so we'll add the session one and again because 
it likely timed out i'm not going to copy it  
we'll just load it again now for the tracking id 
we've got the tracking id plus the sql payload so  
we'll add that over here sql payload encoded and 
that looks good and then we'll make our requests  
so r is equal to requests.gap and we're using the 
gap method because it is a get method that is used  
in the request so it takes in the url takes 
in the cookies so cookies is equal to cookies  
set verified to be equal to false because 
we don't want to verify uh certificates and  
then we'll set proxies to be equal to proxy 
so that the request gets sent to burp when  
the script is run and then we're 
gonna check if the elapsed time
in seconds if that's bigger than let's 
say 9 so if it's 10 seconds or more  
then password extracted is equal to whatever 
password extracted is currently plus  
the character so that would be the 
character version of the ascii number so j  
so what we're doing over here is we're 
just adding the character to the password  
extracted variable and that's because it 
slapped 10 seconds or more and so that  
means that character is valid all right 
and then we want to output it to screen
and flush the screen
and we break and the reason we break is we want 
to get out of this for loop so the one for j  
because if we found the character we no longer 
need to try all the other characters because  
we've already discovered it and so instead 
it'll just move on to the next character  
and that makes it a little bit more efficient 
number okay otherwise print out the character  
that you're trying on screen but we're going to 
flush it afterwards because it's not the correct  
character so password extracted plus character j 
and then this dot std out dot flush okay so what  
this should do is it'll output all the characters 
it's trying once it tries a character that  
actually requires the application to sleep for 
10 seconds that means we found a valid character  
it'll put that on screen and then it'll move 
on to the other characters in the password okay  
this looks good hopefully it doesn't have any 
errors now what's left is to get the tracking  
id and the session and to do that let's see if 
this timed out dead so let's open a new session
in the meantime let's save this 
select terminal new terminal
and it would be python 3 sqli
lab 14 dot py and then the url
so we'll take the tracking id from over here
and the session from the cookie editor as 
well and i copied that twice and what i'm  
going to do is i'm going to make it run 
for the first character only see if it's  
working properly if it is i'll run it for all 
20 characters so let's copy this put it in here
and that did not copy correctly
okay this should work hit enter and 
let's see if we have any errors and  
we do so that would be line number 
eight and that should be a comma  
save it again clear and let's run it and we 
get another error and it's on line number 16.
so we've got tracking id and 
then session that should be  
this over here save it clear and run it again 
and we've got a lot of errors today so number 25
and you could see it's because it's 
really late um so sis dot std out  
dot flush and over here we're missing a curly 
bracket so let's save hopefully that's the laster
and it's not so number 38 and 
we're missing equal to signs  
okay so it's not a good idea to be coding at two 
a.m in the morning okay here we go it looks like  
it's working right now so i'm going to fast 
forward the video until we've enumerated the  
first character and then we'll do the other 
characters in the password okay and we're  
back so the first character is a it looks like 
it's working properly so i'm going to get it  
to enumerate all 20 characters let's clear this 
and again i'm going to fast forward the video so  
that you don't have to wait 10 minutes or whatever 
amount of time it takes to run the entire program  
and we'll come back to it after it's done okay 
and we're back again it looks like i didn't save  
the script and so it ran it only for the first 
character so let's do that one more time and  
hopefully this will be the last time and it should 
enumerate all 20 characters right now and again  
we'll fast forward it until it's done and we're 
back so it looks like it completed let's copy that
go to my account for the 
username use administrator  
for the password use the password we 
just enumerated hit login and it says  
invalid username or password it might be because 
i copied the space over here so let's do that
copy
and paste and here we go it says congratulations 
you solved the lab okay to recap we first  
exploited a time-based blind sequel injection 
using burp suite professional and then we  
scripted it using python in the next lab we'll 
start looking at out-of-band sql injection  
if you liked the video hit the subscribe and 
share button so that it reaches a wider audience  
also comment below what you learned and what 
you would like to see more of in the future  
thank you and see you in the next video