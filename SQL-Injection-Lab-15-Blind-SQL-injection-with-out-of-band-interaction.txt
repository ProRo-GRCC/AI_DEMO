hi everyone welcome back to another
video
in the web security academy series in
today's video we'll be covering lab
number 15
titled blind sql injection without a
band interaction
if you do not have an account on the web
security academy you can get one by
visiting the url portsweger.net slash
web security and clicking on the
sign up button i already have an account
and i am logged in so to access the
exercise i'm going to click on academy
go down
select the learning path select sql
injection
go down select blind sql injection
and then go down to lab number 15 titled
blind sql injection without a band
interaction
all right let's get started this lab
contains a blind sql injection
vulnerability
the application uses a tracking cookie
for analytics and performs the sql query
containing the value of the submitted
cookie
so the vulnerable parameter
is the tracking cookie
the sql query is executed asynchronously
and has no effect on the application's
response
however you can trigger out-of-band
interactions with an external domain
all right so the fact that the sql query
is executed asynchronously and has no
effect on the application's response
that means that even if the application
is vulnerable and we successfully
attack the application the application
won't send us a useful response that
will indicate that our attack is
successful
however because you can trigger an
out-of-band interaction with an
external domain that means we can use an
out-of-band sql injection to exploit
this vulnerability and know that our
attack was successful
so triggering an out-of-band interaction
means that you send an attack payload
that causes an interaction with an
external system that you have full
control of
and since you have full control of this
system when you run your attack you can
see the response that you triggered and
therefore you know that you've
successfully exploited the sql injection
all right next to solve the lab exploit
the sql injection vulnerability to cause
a dns lookup to
burp collaborator all right so what
we're going to do our external system
is going to be burp collaborator and the
way we're going to know that we've
successfully exploited the sql injection
is by doing a dns lookup
on burp collaborator and you could see
over here there's a note that says to
prevent the academy platform
being used to attack third parties our
firewall blocks interaction between the
labs and arbitrary external systems
to solve the lab you must use burp
collaborators default public server
collaborator.net so in order to complete
this exercise
you do need to use the professional
version of burp
there's no way to use the community
edition or your own external domain
okay while burp loads up i'm going to
access the lab
let's go back to burp hit next
hit start burp
and let's click on our exercise
configure firefox to send requests to
burp which will do that using foxy proxy
so now when i click on the home page it
should be sent to
burp and it is so click on proxy
and let's just turn this off go to http
history
and we could see it right over here
so let's send that to repeater because
we might be doing a couple of requests
and we've got it over here if you hit
send you should see the response of the
home page which we do
all right so since this is an
out-of-band sql injection
our end goal over here
is to exploit a sql injection
vulnerability
and cause a dns
lookup so for the analysis section
the first thing we're going to do is
click on
collaborator which we'll do from burp
and then
burp collaborator client again this is
only available in the professional
edition
next we're going to copy to clipboard
and put it right over here so this is
our collaborator client or our external
system
that we'll be doing a dns lookup to now
we need to exploit this sql injection so
we'll
keep that in the background right over
here
so we'll we'll minimize that for now
so now we need to exploit the blind
based sql injection in order to perform
a dns lookup
on this domain over here and to do that
we're going to go back to the exercise
and look at the hint section click
on the sql injection cheat sheet
and go all the way down to dns lookups
so you can see over here it says you can
cause the database to perform a dns
lookup to an external domain
to do this you will need to use burp
collaborator client to generate a unique
burp collaborator subdomain that you
will use in your attack
and then call the collaborator server to
confirm the dns lookup
occurred so this is our unique burp
collaborator client that we generated
this is the one we're going to perform a
dns lookup on once we perform a dns
lookup on it we'll call the
collaborator server and confirm that a
dns lookup did occur
from this domain over here so from the
domain of the
application and to do that it differs
depending on the database you're dealing
with so for oracle this is the payload
that you would perform for microsoft
this is the payload for mysql this is
the payload
currently we don't know what database
we're dealing with so what we're going
to do is we're going to start off with
oracle if it doesn't work we'll move on
to microsoft and so on and that's how
fuzzing the application really works
unless you know some background
information depending on the
technologies that are being used
the likelihood of a database that is
being used in the backend
so starting off with oracle there's two
different types of payload the first
is for unpatched versions of oracle and
the other one is for fully
patched versions so let's look at the
unpatched version
it says the following technique
leverages an xml external entity
vulnerability to trigger a dns lookup
so we haven't learned about xml external
entities in these
videos yet and we won't really learn
about them until we
reach the xml external entity module of
the web security academy but just to
give you a quick
idea xml external entity is a type of
attack that can be done against
applications
that parse xml input so if the
application does not properly validate
input it's possible to exploit this
vulnerability and cause a ton of things
like
information disclosure denial of service
and so on and in this case we're going
to abuse this vulnerability
with sequel injection in order to
trigger a dns lookup to confirm that we
can trigger an external interaction
from the database so the vulnerability
has been patched but there are many
unpatched oracle installations in
existence and if you're dealing with an
unpatched oracle instance then you could
use
this payload over here to try and
exploit the vulnerabilities let's copy
that
and put it in our notes
now if this doesn't work what we're
going to do is we're going to try the
next one
which says the following technique works
on fully patched oracle installations
but requires elevated privileges
so this puts an extra measure on us the
fact the sql
server has to be run with elevated
privileges and if it's not even though
if it's vulnerable we won't be able to
do the dns lookup and now that's
assuming that it's an oracle database if
it's not an oracle database again we'll
move to microsoft and so on until we've
tried all of them
and when you're doing real assessments
you could try all of them and
um it doesn't work and what that means
is that it's not vulnerable to
an out-of-band sql injection okay so
the first thing we're gonna do is put
our
burp collaborator client domain over
here so let's remove that
copy this
put it over here and it was http
all right next we need to
edit this payload so that it fits our
sql query so the first thing we're going
to do is we're going to put it in
brackets
we're going to add the concatenate
operator and then we're going to comment
out the rest of the query
all right let's copy that open up
repeater and put it in the tracking id
which is our vulnerable parameter
and we might have forgotten something so
we need a single quote over here
to close off this string so the tracking
id cookie string so let's put that over
here
and then we'll do control u to url
encoded
and before we hit send we're going to
open up
our client so our burp collaborator
client
make that a little bit smaller and then
hit send
and then we're going to click on pull
now and see if we got a dns lookup and
here we go
it says we got a dns lookup and it was
received from
this ip address over here which should
be the ip address of the
application okay so this should have
completed our exercise
because the exercise only required us to
do a dns lookup and here we go it says
congratulations you solved the lab
in the next lab we'll actually use this
dns lookup in order to
output the administrator's password
so we usually perform uh the exploit
manually and then script it using python
however
in this scenario you can't really script
it using python because you
can't use your own external server you
have to use burp collaborator the
application does not allow you to use
anything other than verb collaborator
and therefore there's no scripting
portion
for this video again in the next video
we'll take this vulnerability a step
further and use it in order to
output the administrator's password if
you like the video hit the subscribe and
share button so that it reaches a wider
audience
also comment below what you learned and
what you would like to see more of in
the future
thank you and see you in the next video