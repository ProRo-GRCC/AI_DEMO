hi everyone welcome back to another
video in the web Security Academy Series
in today's video we'll be covering lab
number 17 in the SQL injection module
titled SQL injection with filter bypass
via XML encoding alright before we
continue with the video I'd like to
announce that this video is part of a
course that I offer on my Academy now
you might be wondering why would I buy a
course that is made available for free
on YouTube well there are four reasons
why you might want to do that number one
is that you gain Early Access to
recorded material as soon as I record
new videos I make them available through
my course right away whereas on YouTube
they'll only be released on a weekly
schedule reason number two is that you
gain access to a Discord Channel where
you can ask questions the Discord
channel is divided into topics that we
cover in the course and if you run into
any issues you get to ask questions
about anything related to the course
material reason number three is that you
no longer have to deal with YouTube ads
or sponsor messages and last but not
least reason number four is you get to
support me any revenue generated from
this course will go back into
maintaining the academy in creating more
videos and courses that will be made
available for free on my YouTube channel
so if you're interested in buying the
course make sure to check out the link
in the description and that is it let's
go back to our video if you do not have
an account on the web Security Academy
you can get one by visiting the URL
portswiger.net web security and clicking
on the sign up button I already have an
account and I am logged in so to access
the exercise I'm going to click on
Academy
select all labs
go to the SQL injection module which
should be the first one and go down to
lab number 17 titled SQL injection with
filter bypass via XML encoding all right
let's get started this slab contains the
SQL and injection vulnerability in its
top check feature the results from the
query are returned in the application's
response so you can use a union attack
to retrieve data from other tables the
database contains a user's table which
contains the usernames and passwords of
registered users to solve the lab
perform a SQL injection attack to
retrieve the admin user's credentials
then log into their account alright so
the target goal over here is to exploit
a SQL injection in the stock check
feature and then retrieve the admins
username and password from the users
table in the backend database and logged
into their account we do have a hint in
this lab saying a web application
firewall will block requests that
contain obvious signs of a SQL injection
attack you'll need to find a way to
obfuscate your malicious query to bypass
this filter we recommend using the hack
verter extension to do this okay let's
access the lab
now notice over here this is the
built-in browser in Burbon so all my
requests are already being passed in my
burp proxy
the first thing that we're going to do
is look for input vectors that could
potentially talk to the back end so when
we click on view details right over here
you could see you've got a product ID
input Vector this definitely talks to
the backend so let's send this one to
repeater
and if we go down and click on check
stock right over here
you've got a post request that takes in
a bunch of XML input which also
definitely talks to the backend so let's
send this to repeater in a real life
scenario you would test both requests
but because we know the vulnerability is
in the check stock feature we will only
be testing this request in the video so
let's hit send so that the XML is
properly formatted
all right so you could see over here it
takes in the product ID and the store ID
and then in the back end it performs
some kind of SQL query that takes in the
product ID and the store ID and checks
the number of items that are left for
this product at this store so if this
query is not properly parameterized then
what we could do is we could potentially
exploit it to retrieve content from the
database or in worst case scenarios get
remote code execution on the server so
let's test it for a really common SQL
query so let's say one
Union select no
in this query you were just really
trying to determine the number of
columns that are available in the table
so let's hit send and we get attack
detected so just like the hint suggested
there's some kind of web application
firewall that sees that we're trying to
perform some kind of SQL injection
exploit and prevents us from performing
the attack and so we need to obfuscate
our input in a way that the web
application firewall gets bypassed and
to do that we're using an extension
called hackverter if you do not have the
extension installed on your verb because
it doesn't come installed by default you
need to go to extender
select the Bap store and then search for
hack inverter over here click on it and
then go down and click on install I
already have it installed and so what
I'm going to do is I'm just going to go
back to repeater
highlight my exploit
right click
select extensions hot further and then
encode because we're trying to encode it
and you've got a bunch of options the
one that I'm gonna use is hex entities
all right so this will perform the
encoding for us which hopefully will
bypass the firewall so let's hit send
and see what we get okay so this is a
good sign it no longer says attack
detected and over here it actually still
outputs the number of units that are
available for this product ID now let's
see what happens if I add another null
if I get the number of units again that
means there's two columns in the
application let's hit send
and we get zero units so there's
definitely only one column in the query
sorry not the application but there's
definitely one column in the query and
so we're only able to Output the content
in one column which means if we're
trying to Output the content of two
columns which is the usernames and
passwords columns we need to concatenate
them in some way and we've learned how
to do that in previous Labs so let's
remove this right over here
go back to send to make sure it's still
working it does and just write up our
query over here
so it would be one
Union select
username we already know the names of
the columns again we did have a lab
where we learned how to Output the names
of the columns in the database so
username and then we're going to use the
tilde over here
to separate the content of the username
column and the content of the password
column
so that they all appear to us in one
column and we're going to say it's from
the users table
all right let's copy this entire thing
put it in here
and again the hack further extension
will take care of obfuscating our input
so let's hit send
and here we go so the query worked and
it outputted the contents of the users
table specifically the username column
and the password column and we're
looking for the admin username and
password so let's go back to our
application click on my account
copy the administrator's username which
is just administrator and then the
administrator's password
paste it in here and hit login
and we get the congratulations you saw
the lab exercise alright so we
successfully completed the exercise by
exploiting the vulnerability manually
now we usually script our exploits in
Python however because we are using an
external tool which is the hack further
extension we won't be scripting our
exploit in Python for this video
if you like the video hit the Subscribe
and share button so that the video
reaches a wider audience also make sure
to check out my course if you're
interested in seeing more videos like
this one thank you and see you in the
next video