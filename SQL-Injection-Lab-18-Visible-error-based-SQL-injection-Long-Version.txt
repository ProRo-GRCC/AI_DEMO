hi everyone welcome back to another
video in the web Security Academy Series
in today's video we'll be covering lab
number 18 in the SQL injection module
titled visible error based SQL injection
all right before we continue with the
video I'd like to announce that this
video is part of a course that I offer
on my Academy now you might be wondering
why would I buy a course that is made
available for free on YouTube well there
are four reasons why you might want to
do that number one is that you gain
Early Access access to recorded material
as soon as I record new videos I make
them available through my course right
away whereas on YouTube they'll only be
released on a weekly schedule reason
number two is that you gain access to a
Discord Channel where you can ask
questions the Discord channel is divided
into topics that we cover in the course
and if you run into any issues you get
to ask questions about anything related
to the course material reason number
three is that you no longer have to deal
with YouTube ads or sponsor messages and
last but not least reason number four is
you get to support me any revenue
generated from this course will go back
into maintaining the academy and
creating more videos and courses that
will be made available for free on my
YouTube channel so if you're interested
in buying the course make sure to check
out the link in the description and that
is it let's go back to our video if you
do not have an account on the web
Security Academy you can get one by
visiting the URL ports. net websecurity
and clicking on the sign up button I
already have an account and I am logged
in so to access the exercise I'm going
to click on
Academy select all
Labs do a search on visible error based
SQL injection and select the
lab all right let's get started this lab
contains a SQL injection vulnerability
the application uses a tracking cookie
for Analytics and performs a SQL query
containing the value of the submitted
cookie the results of the SQL query are
not returned the database contains a
different table called users with
columns called username and password to
solve the lab find a way to leak the
password for the administrator user then
log into their account all right so the
angle over here is to exploit the SQL
injection vulnerability in the tracking
cookie for analytics and then retrieve
the admin users credentials from the
user table and log into their account
all right let's access the
lab now notice over here this is the
built-in browser in burp and so all my
requests are already being passed in my
burp proxy all right the first thing
that I'm going to do is just play around
with the application to identify any
parameters that could potentially be
talking to the back end so let's click
on view details right over here it
performs this request over here if we
look at the request itself you could see
over here there's a product ID which is
equal to one that's probably interacting
with the back end so this definitely
should be tested for SQL injection
vulnerabilities and if we go down over
here it's a get request and so it does
not have any parameters in the body
however if you look over here there's a
cookie called tracking ID and another
cookie called session now the session
cookie is likely generated by the
framework and unless there's some
backend code that takes it in it likely
won't be vulnerable to SQL injection how
however tracking ID is a custom cookie
so it might be vulnerable to SQL
injection we'll start off with testing
this one and if it doesn't work we'll
move on to testing the product ID
parameter so let's send this to
repeater and in repeater right over here
let's make this a little bit
bigger and move it to the side so that
we could take
notes all right so the first thing that
I'm going to do is insert a single quote
now this single quote is part of the SQL
characters and if the application is
interpreting this string over here as
SQL code this should interfere with the
SQL query in the back end and generate
an error now the SQL query over here
will likely look something like this so
select tracking ID
from tracking ID let's say
table where tracking
ID is equal
to the tracking ID so over here we've
got two single quotes and then it would
take in the tracking ID right over here
so let's copy
that put it in here and this is likely
what the quer is going to look like in
the back end now when we added a single
quote over here what happens is that if
it's interpreted as SQL code this single
quote over here that we added will end
this single quote over here so the
string is complete however over here we
end up with a single quote that doesn't
have an end single quote and so it
should generate an error so let's see if
it does click on send over here and here
we go we do get a 500 internal server
error now I wonder if we do get an error
from the lab itself or the backend
database sorry and we do okay perfect so
over here it says unterminated string
literal it's talking about the single
quote over here at the end and perfect
it actually gives us the query in the
back and so let's copy this entire thing
over
here this is what we call a verbos error
so it's not only telling us that we're
using an invalid query but it's also
telling us the details of the query so
this is the perfect scenario for a pent
tester so let's remove all of this over
here this is the real query it's really
similar to the one that I guessed it
would look like so you've got select
star from the tracking table where ID is
equal to the ID of the tracking ID and
the reason it said unterminated string
literal is again because you've got this
single quote over here that is not
closed off anywhere so what we're going
to do is actually just add two
dashes and this way it says to the SQL
database ignore the rest of the query so
it'll ignore this um single quote right
over here so let's copy this entire
thing and see if we still get an
error let's put that in
here okay
send and here we go we get a 200 okay
message and we no longer have the
database error now notice over here that
the output of the SQL injection does not
appear on the page and so this is
technically called a blind SQL injection
but the good thing is that it does
generate a verbos error and we might be
able to get the error message to Output
the password of the administrator user
now one way to do that is to use
something called a cast function so
that's spelled this way over here now
what this function does is it allows you
to convert one data type to another data
type the reason this might work is
because when you convert to a data type
that um let's say a specific column or a
query is not compatible with it should
throw an error which again may help us
in um getting that administrator's
password based on the error message that
it throws so what we're going to do
first is cop this entire thing over
here and actually let's pretend that we
know this so we'll just add our payload
from now and
on all right so that was our previous
payload now we're going to use the cast
function to try and see if we could
generate a different error so let's say
and cast the output of this statement so
just select
one as an
integer and then comment out the rest of
the query so let's copy this and see the
error that we
get now we need to URL encoded so right
click and then go
to convert colelection URL and URL en
code key
characters and then hit
send and we get another 500 internal
server error and if we go down right
over here it says error argument of n
must be type Boolean not type integer
okay so it wants this entire statement
over here to Output a Boolean and not an
integer which it does right now so to
change that up let's copy this again
just so that you have all the steps in
the notes document which I'll include a
link to it in the description of the
video so over here let's say one is
equal to this entire query right over
here so what it'll do is it'll evaluate
this part of the query which is this
right over here and then it'll perform
the end operator on the output of this
query which is is 1 equal to one and
that should output true all right this
should remove the error for us so let's
copy
this and paste it in here
and again we need to URL encode
it so right click convert selection and
then url url encode key
characters and then hit
send and we get a 200 okay okay so this
is interesting we no longer get that
error saying that it needs to be a
Boolean now we just get a 200 okay
message is saying that this query is
completely valid so let's take this a
step further and see if we could get it
to out putut some information from the
backend database so instead of saying
select one what we're going to say is
Select username which is the column
username from the users
table let's copy this entire thing this
should definitely error out because
you're saying 1 is equal to all the
usernames in the users
table so let's paste it in
here and again URL
encoded so
rightclick convert selection URL and URL
incode key
characters hit
send and we get a 500 internal server
error message which we expected and if
we go down over here the error is a
little bit different it's not something
that I expected so it says say over here
unterminated string literal started at
position 95 and then you could see this
is our query right over here and then it
says cast and then you've got select
username from users as and the rest is
truncated so this is interesting now the
first weird thing is that it said it's
unterminated string although we
determine that this query over here is
valid which means that this query over
here in a sense should be valid it
should give me an error that you can't
compare let's say an
with a string or a list of columns
however it shouldn't give me the error
of unterminated string but the reason
it's giving me this error is because it
looks like it truncated this entire part
over here now my guess is that there is
some kind of validation in the back end
that only accepts a certain number of
characters and we ran out of characters
so we need to figure out a way to make
this query fit within that number of
characters and the first thing to go is
the tracking ID cookie because it's not
necessary so if we remove it right over
here all it'll do is it'll check where
the ID is empty and then it'll evaluate
our query so let's copy
this paste it in
here and again URL
encoded so you could do that with uh
control U as
well hit
send and we get a 500 internal server
error button if we go down it still says
unterminated string and it's because we
never removed the tracking ID so let's
remove that just this
string H send go
down and here we go so the error changed
now we're definitely within the number
of characters that the application
accepts however it gives us an error
which I expected and there is that
there's more than one row returned by a
subquery used as an expression so over
here it's saying is one equal to a bunch
of usern names in the user table which
does not work so what we need to do is
limit the entry to only one username so
we're comparing one to be equal to the
first username in the users table let's
copy
that and paste it in here now I'm really
hoping that this is not above the limit
because if it's above the limit we might
be a little bit screwed because I don't
know how to make this query shorter so
right click convert selection URL and
then URL encode key characters hit
send and we get a 500 internal server
error message which again I expected
because what you're doing is essentially
saying is one equal to a string and the
string would be the first username in
the users table and if you look over
here you could see it says invalid input
Syntax for type integer administrator so
it leaked the first username in the
users table which is the administrator
now I'm really happy because that means
I could also leak the password of the
first user in the database which is the
administrator user so let's copy
this and all we have to do is say select
password
from the user's table and limited to one
and we know that the first entry is for
the administrator user based on this
query over here so it should leak the
administrator's
password again we should youl incode
this so controll U hit
send go down and here we go so this is
the administrator's password let's copy
it put it in here and if we go over here
click on my
account select
administrator put in the password hit
log
in and here we go we logged in as the
administrator user and it says
congratulations you solve the lab all
right so we successfully completed the
exercise by exploiting the vulnerability
manually now we usually script it in
Python however as you saw there was a
bit of uh going back and forth when it
came to this specific SQL injection
because it is a tough one so what we did
is we first tried a query we tried to
build a valid query when we built a
valid query we were able then to try to
leak information from the backend
database now you can do that with
automated tools and again that's a
reason why you should absolutely learn
how to do things manually before you use
automated tools so for today's lab we
won't be scripting it in Python if you
like the video hit the subscribe rbe and
share button so that the video reaches a
wider audience also make sure to check
out my course if you're interested in
seeing more videos like this one thank
you and see you in the next
video