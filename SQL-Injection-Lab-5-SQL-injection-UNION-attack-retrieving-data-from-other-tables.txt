hi everyone welcome back to another
video in the up security academy series
in the previous video we covered the
fourth lab
in the sql injection module that we got
some hands-on experience by exploiting a
union-based sql injection
in order to determine the data type of
the columns that are being returned by
the vulnerable query
in today's lab we'll be using a union
based sql injection attack in order to
retrieve all the usernames and passwords
of the users
of the application if you do not have an
account
on the web security academy you can get
one by visiting the url
portswigger.net web security and
clicking on the sign
up button i already have an account and
i am logged in so to access the lab i'm
going to click
on academy
select the learning path
like the sql injection module because
that's the module we're working with
go down
select sql injection union attacks
go down
and click on the lab titled equal
injection union attack retrieving data
from other tables
before we solve the exercise it's worth
mentioning that this lab builds up on
the knowledge that was acquired in the
previous two labs
and so i'm going to assume that you've
solved the labs and
you're already familiar with this type
of attack if you haven't feel free to
pause this video and watch the videos
for laps
number three and labs number four all
right let's get started
this lab contains a sql injection
vulnerability
in the product category filter
got sql injection
and that's in the product category
filter
the results from the query are returned
in the applications response so you can
use a union attack to retrieve data from
other tables
to construct such an attack you need to
combine some of the techniques you
learned in the previous labs so this is
lab number three and lab number four
that i was talking about
the database contains a different table
called users
with columns called username and
password to solve the lab perform
a sql injection union attack that
retrieves all usernames and passwords
and use this information to log in as
the administrator
user our end goal over here
is to output the usernames
and passwords in the users table
and log in as the administrator
user
okay let's access the lab
while the lab spins up i'm going to
create an analysis section
and just like we discussed in the
previous lab there are two steps that
you need to perform before you can
actually
output data on the page and the first
one is
you need to determine the number of
columns
that the vulnerable query is using
the second thing is you need to
determine
the data type
of the columns
okay going back to the application
we said that it's a product category
filter that is vulnerable so if we hit
gifts
you see in the url there's a parameter
called category
and that's our vulnerable field you can
confirm that by just putting
a single quote which is a sql character
that results in an internal server error
because it resulted in a syntax error
in the database which resulted in an
internal server error in the application
so this is our vulnerable field
now we need to determine the number of
columns that are being used
in the query that filters based on
category and we set the way to do that
is to use the order by clause
and to iteratively order by each column
until we get an internal server error
now when we get an internal server error
that means we're trying to order by a
column that does not exist
and that's why the number of columns
that the query is using would be
that column that we're ordering by minus
one let's start off with ordering by one
should work because i know for sure that
the application is at least using two
columns one for the title
those no delivered to your door and one
for the description
those are the ones that i can see on the
page but it's possible that there is
more that
are not outputted on the page let's hit
enter
and we get an error and the reason is
because we didn't comment out the rest
of the query
let's try that again
here we go it looks like it's ordering
by the title so you see over here it
starts with c
and then moves on to h s and so on
okay so we have at least one column
now let's try ordering by two
and we don't get an internal server err
i think what it's doing it's ordering by
the second column which is this one over
here and you'll see over here it starts
off with an
a second one is a b and so on
okay now let's order by
the third column
and we get an internal server
which means that the number of columns
is
three minus one so we know that there is
two columns
the next step is to determine the data
type of the columns
we're thinking there is the query is
something similar to this so select
a b from maybe
products table where category
now in order to determine the data type
we said in the previous lab the way to
do that
is to add union statement
so we're closing off this quote over
here
and then iteratively add select null
statements
with a string value in each column until
we
hit an error so let's try with the first
column
now i have only two columns over here
because i already know that there's two
columns based on my first step
let's see if this gives us an error if
it does that means
that this column does not accept data
type ring
okay you could see over here that we
output
the character a and so the first column
which is the title column
accepts the string value okay let's try
the second one
and we also don't get an error for this
one and so you'll see it over here a and
a and what that means is that both
columns
are of data type string
that means if i want to output data from
other
tables in the database i can use both
these columns
and the angle for this exercise was to
output the usernames and passwords in
the users table and log in as the
administrator user
so to do that
i'm going to use a union query again
and say select the username field
and the password field from
the users table
then comment out the rest of the query
now the reason i can do this is because
one
the number of columns in this query
is equal to the number of columns in the
original query over here
and so this works if i was only able to
find one column over here that is
outputted on the page or only one column
that has
a data type string then i would have to
output each column on its own
and then output the second column
because the page only allows me to
output one column at a time
or what i could do is try to concatenate
the result of two columns together so
that they're outputted on a single
column and that's something that we'll
learn
in the next slot because you will come
across situations where
the page only displays one column of
data type text and so you have to work
with that column
but in this case it's easy you only need
to output two columns and it just so
happens that the page
has two columns that are of data type
text
and so it works let's copy
that
put it over here hit enter and here we
go
you could see over here it outputted the
username carlos
and then the password of carlos same
goes for this user and this one over
here so this one's the one that we're
interested in so administrator
and the password of an administrator i'm
going to copy that put it over here
and then log in as the user
let's see if we can log in
here we go it says congratulations you
solved the exercise
now let's script the exploit okay
let's save this
and start our script over here
the first thing i'm gonna do is import
the requests library
then url lip three
i'm also going to add this line over
here so that i disable any warnings
about insecure requests
okay next we'll set our proxy setting
like we do with
every lab
okay that looks better all right then
we'll write the main function
and try and accept clause
okay so what i want to do is i want my
script
to run like this so it just takes in the
url parameter
and then it outputs the administrator's
hash
we're not going to actually implement
step number one and step number two
instead we're going to assume that we
know this based on manual hands-on
testing
and we're gonna hard code the values in
this script
and the reason behind that is because it
would take me about 30 minutes to write
the script and
involve all the steps and we've already
done it in previous labs
and so we'll keep that as an exercise
and instead for today we'll just write a
small script
that outputs the administrator's hat
it takes in the url
from the first command line argument
and if you give it the incorrect number
of command line arguments i don't want
it to throw an exception
instead i wanted to print this text over
here
so the usage instructions
and then an example of running the
script
let's say www dot example dot com
and then the name of the program
and then exit
alright if you do give it the correct
number of arguments
and it sets the url to the url parameter
over here
the next thing i wanted to do is print
dumping the list
of usernames
and passwords
and then i'm going to write a new
function so exploit
sqli users
table url
then i wanted to print
did not find greater
[Music]
password
okay if this function over here
evaluates to false
then i wanted to print out it did not
find an administrator password
all right so let's write this function
so we're saying the username is equal to
administrator
the path is equal to in order to get
that
let's fire up burp
and while burp is opening up i believe
this might have timed out and so i'm
gonna open it again
click next close
our burp
okay set foxy proxy to send requests to
burp
and over here i'm going to set intercept
to be off
and then i'm going to click on gif and
here we go we could see the requests
in the history tab of verb so this one
is the one that i'm interested in
put that over here so this is our path
copy that
next we want our sql payload
and it's this one over here
and then we'll make a get request and
we're making a get request because this
is a get request over here r
is equal to us
and it's the url plus the path
plus the payload
that verified to be equal false
and proxies be equal to proxy
so we're at our fifth lab right now so
this
type of scripting should now become
familiar or second hand nature to you
okay and then i want to save the
response in a variable called dress
okay so i need a way to find the
administrator's password
from the response so let's run the
attack
in the browser and see how it gets
displayed in the response
enter okay
and you should see it over here all
right let's make that a little bit
bigger
okay you see over here that you've got
the administrator username
and it's in the ph element
and then the password is in the td
element
so we need a way to parse the response
and
to do that we're going to import another
library
from bs4 import
okay so i'm going to say if
the text administrator
is in the response
then i'm going to print
and the administrator
password
and then i'm gonna use my library
to parse the response so r dot text
html parser
and then the admin password
look for it in the body of the response
we'll use the find element where text
is equal to administrator
and now what i really want to extract is
the password of the administrator so to
do that
i'm going to use dot parent
which will lead me to this element over
here
and then i'm going to say find next so
find the next
element find the next td
element which will send me to this
element over here
and then extract the content that
element so
contents zero so there might be an
easier
way to do this but it's late and that's
the one that i can
think of right now what this should do
is it should extract the
password of the administrator user
okay and then i'm gonna print
the administrator password
as
so this variable over here
and then i'm going to return true
otherwise i'm going to return false if
it doesn't find
the text administrator in the response
then it will
turn false if it does find the text
administrator it's going to print found
the administrator password
it'll parse the response over here it'll
look for administrator it'll move to the
parent
element oth and then it will move to the
next element over here
td and then it will grab the content
okay so this should work let's do
terminal new terminal and save this
first
and then python 3
and let's grab the url
and we just need the url of the
application
okay let's hit enter got an error over
here and it's because it's import
let's clear that and run it again
and we get an exception
oh and the reason we're getting an
exception so i can tell it's a proxy
issue they can't connect to the proxy
and
issues right over here that should have
been 127.0.0.1
and 88. okay let's save that one more
time and hopefully no more errors
okay so here we go what it's doing it
says it's dumping the list of usernames
and passwords it checks to see if the
response has the administrator string
and it does and so it says found the
administrator password
and then it dumps the administrator
password over here so let's look at burp
and that's the password over here so you
could see the request that it made
and with minis reader
and the password over here so this is
definitely way more elegant
if you're showcasing this to management
or uh to your team it's definitely way
more elegant to
show them a script where you just
immediately run it and then it outputs
the administrator password versus having
to go through
the browser and play around with the
parameters until you get the password
okay so we've successfully completed the
exercise to recap
in this video we first manually ran a
sql injection union attack
in order to output the usernames and
passwords of all the users
in the application we then scripted that
exploit so that it
automatically does that for us if you
like the video hit the subscribe and
share button so that it reaches a wider
audience also comment below what you
learned and what you would like to see
more of in the future
thank you and see you in the next video