hi everyone welcome back to another
video in the web security academy series
in the previous video we covered lab
number six in the sql injection module
so we got some hands-on experience by
exploiting a union-based sequel
injection
in order to retrieve the usernames and
passwords of the users of the
application
in a single column in today's video
we'll be using a union based sql
injection attack to query the database
type
and version on oracle databases
if you do not have an account on the web
security academy
you can get one by visiting the url
portswigger.net
web security and clicking on the sign up
button
i already have an account and i am
logged in so to
access the lab i'm gonna click on
academy
go down
select learning path go down again
select sql injection go down one more
time
and select examining the database in sql
injection attacks
all right so we'll be covering the first
one titled
sql injection attack querying the
database type and version on oracle
alright let's get started this lamp
contains a sql injection vulnerability
in the product category filter
so we've got sql injection
and it's in the
product category filter
you can use a union attack to retrieve
the results from an injected query
to solve the lab display the database
version string
so the end goal
is to display
the database version string
all right and they give us a hint over
here we're not going to look at it
just yet let's access the lab
we'll add an analysis section
okay so it says make the database
retrieve the string
that is displayed on the screen so the
version of the oracle database
all right so if we look at the
application it's
the same or at least similar shopping
application that we've been dealing with
in the previous labs
if we click on gifts so the category
gifts
it refines our search on the items that
are related to the gifts category
and we can see over here that the
category parameter is included in the
url
and that's the field that is vulnerable
based on the description of the lab
so to confirm that it is vulnerable i'm
gonna add a sql character
a single quote that will result in a
syntax error which should result in an
internal server
error at the application level and it
does
okay so this looks like it's vulnerable
to sql injection
now whatever we enter in this field over
here gets displayed on the page
and that's why we can use a union based
sql injection
to exploit this vulnerability and to do
that we said there is
two steps that you need to do before you
can output data from the database
and the first one is to
determine the number of columns
that the vulnerable query is using now i
can tell there has to be at least two
columns because you could see over here
each item has two entries one is the
title of the item and then the
description of the item
so my assumption is there's two columns
but there could be other columns that
are not displayed on the page and that's
why we have to test for that
and the way we do that is by using
this payload over here so order by and
the column number
so when we order by a column it should
order the column on the page
and if we try to order by a column that
does not exist it should throw an
internal server error so we know there's
at least one column because we can see
it on the page and so this should give
us a 200
response code okay
so let's do that using burp
and for those of you that are not
familiar this is pretty much
a man in the middle proxy that sits
between the browser and the application
and any requests that happen through the
browser get sent to
first before they get sent to the
application and any responses from the
application get sent to burp first
before they're sent back to the browser
all right let's put this over here and
click on the proxy tab so you'll see
over here it's
localhost 8080 and i'm going to use my
foxy proxy extension to set it to
send requests to burp all right and i'm
going to click
on gifts one more time and you'll see
over here it intercepted the request
now since i'm going to be sending
multiple requests
i'm going to send it to repeater and i'm
going to work from there
okay so let's turn off the proxy
and go back to repeater
all right so let's copy our payload
and then do control u to url encoded
hit send and we get a 200 response codes
confirming that we have at least one
column
now if we do two and hit send
we also get a 200 response code
confirming that we have at least
two columns now let's try with three
and we get an internal server error so
let's write that down
what that means is that we're trying to
order by
a column that does not exist and since
we did this iteratively
that means that the number of columns
that is used by the vulnerable query is
three minus one
which is equal to two
all right the second thing to do in a
union-based sql injection attack
is to determine the data types
of the columns and we said we do that
using a union select
null query so we know there's two
columns
and what we're going to do is we're
going to test each one
using an a text value or a string and
if the data type of this column is not
compatible with the data type of the
column that is used to filter on
category it should throw an error
telling us
that this column is not of type string
and if we don't get an error that means
that the column is also of type string
now if we go back to the application you
could see over here both columns contain
alphabets and so they're both of type
string
but let's test it out regardless just in
case
so i'm going to put both of them because
my assumption is that both of them are
of type string based on what we see
in the browser
okay again we need to url it
hit send
and i think we messed something up so
let me do this one more time
okay let's copy it
and we're missing a quote and then ctrl
u to url encoded
and hit send okay so we're getting an
internal server error again which makes
me think
that this is an oracle database and i'll
explain why in a second
so i should have known that based on
just the lab description it says
querying the database type and version
on oracle but i didn't read that
properly
and the reason i think that this is an
oracle database is because i know for
sure that these two
columns are of type text based on
the browser over here however this still
gave me an internal server error which
does not make sense
and so what i'm going to do is i'm gonna
search oracle select
statement
let's click on this entry over here
okay so it defines over here how you
perform a select statement in oracle
databases
so it says select the number of columns
from the table name
if you go down over here and click on
oracle dual table
you'll notice over here that it says in
oracle the select
statement must have a from clause
however some queries don't require
any table so in this scenario over here
we don't have
a from clause and that's why this filled
now i don't know the tables that i want
to extract from
and this is just me putting strings in
the columns
and so i need some dummy table to use
in the from clause in order to be able
to confirm the data types of the columns
and over here you'll see that it says
oracle provides you with a dual table
which is a special table that belongs to
the schema of the user sys
but it is accessible to all users and so
you could use it
in scenarios like this where the data
that you're outputting is not actually
coming from a table so let's try this
over here
and then we'll do control u to url
encode it
hit send and we get a 200 response so
now we know for sure that this is an
oracle database
and then if you go down you should see
a and a so the content being outputted
on the page
all right so those are the first two
steps in
a union sql injection the next thing to
do
is to output the version of the database
okay and to do that we're going to go
back to the exercise and look at the
hints section
because there you'll find a sql
injection cheat sheet
which tells you what the command is for
outputting the version
on each type of database so if you go
down
and then in the section database version
it tells you how to output the database
version when it comes to oracle
databases when it comes to microsoft
databases when it comes to mysql
databases
and so on so we're looking for this one
over here since we know it's oracle
based on the fact that
it through an internal server error when
we didn't
enter a table name so
the command is over here
okay but we have to put that in our
union base sql injection attack so it
would be union
select the banner
and then over here it's still two
columns so we still have to put a value
so null in the second column and then
we're gonna say from
the dollar sign version
and then the comment characters
and let's copy that
and put it over here and then again you
need to url encode it
that's ctrl u hit send
and we get a 200 response code
okay so let's go down and see if we
actually outputted the version
okay let's make that a little bit bigger
so you'll see over here it started
outputting the content
and the exact version we're looking for
is this one over here so oracle database
11g express edition release and so on
and if we go back to the page
it should say congratulations you've
solved the lab all right so we've
successfully completed the
exercise now let's script it
okay so the first thing to do is to
import the requests library
what that does is it allows you to make
get and post requests
next we'll import the sys library
and url lib three
we'll also add this line over here to
disable any warnings that are related to
insecure requests
so url lib3 dot exceptions
dot insecure request warning
and let's click on view and toggle word
wrap
all right so let's write our main method
and then the try and accept clause
all right so the way i want my script to
run
is i'm going to say script
dot py and give it the url
and then it'll perform the sql injection
exploit for me
now i'm not going to do step number one
and step number two because we've done
it in previous labs and so i'll leave
that as an exercise
instead i'm going to assume we know the
number of columns and we know which
columns we can use in order to output
content from the database
and we're just going to use the script
to output the version
of the database so we're going to take
from the command line arguments
the url of the application and we do
that using sys.org
v one
dot strip
okay and then if i don't give it the url
i want it to print
the usage instructions and an example of
how to run the application
so name of the program and url
and then let's print an example just so
that we can make it clear
example.com
and again name of the program
and then we exit the program because we
didn't run it correctly
all right so now assuming that we gave
it the correct number
of arguments and the url was saved in
this parameter over here
the next thing i wanted to do is print
this statement
over here
so dumping the version
of the database
and then i'm going to create a function
called exploit
sqli version and it takes in the url
if that function returns false
i'm going to print
unable to dump the database
version all right so if the function
returns false we print the statement
unable to dump the database version
okay so let's implement this function
over here
so actually before we do that we forgot
to set our proxy setting which is super
important when debugging
our script so that's done using http
http 127
0.0.0.1 because that's how our proxy is
set
and we'll do that for https as well
this way any requests that this script
makes get sent to
burp and now if my program doesn't run
or
acts in a different way than expected i
could just look at the requests
and debug the script all right
so now let's write the function so
exploit
sql version again it takes in the url
now we have to build our request so the
path
was this one over here filter category
and it was on gifts
okay the sql payload
was equal to the one we wrote over here
let's copy that
okay and then we're making
a get request and the reason i'm making
a get request is because that's what the
application makes
and then we take in the url concatenate
the path
and the sql payload
all right set verify to be equal to
false because i don't want to verify
certificates and proxies is equal to
proxies
so that the request gets sent to burp in
case i need to debug it
and then i'm gonna set the response
to be saved in the parameter res
okay now i need to figure out if the sql
injection work and i'll do that based on
the content of the response
so if the response has
the string oracle database in it so
we'll see that there's only one match
over here that means
that the sql injection worked because it
dumped the
version of the database so i'm going to
say
if oracle database
is in the response then print
found the database version
and now i don't want it to just say that
it found the database version i also
wanted to extract it from the response
and output it on the command line and so
to do that we're going to import
two more libraries so from bs4
import beautiful soup
and also import the regular expressions
library so this will help us
parse the response and extract the
version from there
so we'll do soup sequel to
beautiful soup and that's the response
over here
that we saved and then
we'll use html parser
okay and now the version would be equal
to soup dot find
the text re.compile so we're using a
regular expression
and what we're looking for is anything
that starts with any number of
characters
as long as you find the string oracle
space database
so the back quote stands for space over
here
and then it ends with any number of
characters
all right and then what it's going to do
it's going to
print
the oracle database
version is
and the version over here so what we
saved in this parameter over here
and then it'll return true
otherwise it'll return false
okay
let's save that open up a terminal
and hopefully it won't have any errors
so that's python
3 sqli lab07
dot py and the url of the program
i'm not sure it's still running
yeah so it timed out we're gonna have to
open it again
okay let's take the url copy
paste remove
the slash over here because we already
included in our path
and hit enter
okay so we got an error although it said
that it solved the lab let's find out
why
so line 33
okay so i think i know what's wrong
this was written incorrectly
so the regular expression so whenever
you're writing a regular expression
you're not sure if it's correct
what you could do is just go to regex101
and confirm that it's correct over there
so
i'm going to copy this
okay it looks like the regular
expression is correct now i want to
confirm that
it will find
the database version through it so
what was it let's copy the request again
in proxy
hit gift send it to repeater
and exploit it one more time
and do ctrl u to url link coded
hit send okay
and i'm looking for this over here it
says zero
matches oh and that's because we're
looking for this one over here
hit send okay i found one match
okay so this is the string that i'm
trying to match on
and so what i'm going to do is i'm going
to copy the entire string
put it in regex101
and see if it matches on it now you
could see over here it says one match
and what that means is that your regular
expression that is put over here
matches on this string over here and so
the program should work
all right so i'm going to save it
go back to burp put request off
just so that it doesn't interfere with
things clear this
and hopefully this should work let's go
to our history tabs so that we see it in
real time happening
hit enter okay so you could see over
here it says dumping the version of the
database
it found it based on the regular
expression that we gave it and then it
says the oracle database version
is this string over here and you'll see
the request that i made is this one over
here
and then again if we search on that
string
we find it
all right so we've successfully
completed the exercise
to recap in this video we first manually
ran a sql injection union attack that
allowed us to query the database type
and version
on an oracle database we then scripted
the exploit so that it automatically
does that for us in the next lab we'll
learn how to exploit a union-based sql
injection vulnerability in order to
query the database type
and version on microsoft and mysql
databases
if you liked the video hit the subscribe
and share button so that it reaches a
wider audience
also comment below what you learned and
what you would like to see more of in
the future
thank you and see you in the next video