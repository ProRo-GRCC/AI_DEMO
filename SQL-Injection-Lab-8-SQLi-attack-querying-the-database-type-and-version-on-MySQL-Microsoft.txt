hi everyone welcome back to another
video in the web security academy series
in the previous video we covered lab
number seven
in the sql injection module so we got
some hands-on experience by exploiting a
union-based sql injection in order to
query the database type
and version on an oracle database
in today's video we'll be using a union
based sql injection attack to query the
database type
and version on mysql and microsoft
databases
if you do not have an account on the web
security academy you can get one by
visiting the url
portswigger.net web security and
clicking on the sign up button
i already have an account and i am
logged in so to access the exercise i'm
going to click on academy
scroll down select the learning path
scroll down select sql injection
scroll down again select examining the
database
and we're going to be solving the second
lab titled
sql injection attack querying the
database type and version
on mysql and microsoft
all right let's get started this lab
contains the sql injection vulnerability
in the product category filter so that's
important let's write it down
so sql injection and it's in the
product category filter
[Music]
you can use a union attack to retrieve
the results from an injected query
to solve the lab display the database
version string
so the end goal
is to display
the database version
you could see over here they gave us a
hint we won't look at it just yet
instead we'll access the lab
okay let's start an analysis section
all right so it's the same shopping
application that we've been dealing with
in the past couple of labs
the vulnerable field is the category
field so if we click on
accessories it'll only show us the items
that are related to that category
and that's filtered based on a parameter
category that is available
in the url now based on the exercise we
know that this field is vulnerable to
sql injection
so to confirm that i'm going to add a
single quote which
is a character in sql what this will do
is it will throw a syntax error which
results in an internal server error
at the application level so this
confirms that this is vulnerable to sql
injection
now let's go back notice over here
whatever category you filter on
the content gets displayed on the page
and this is why we know that we can use
a union based sql injection
in order to output other content from
other databases
so in this scenario we could see that
there seems to be
two columns now there could be more
columns that are not outputted on the
page but there's at least two columns
that this vulnerable query is using
because you could see over here there's
a title
of an item and then the description of
the item
and from the looks of it it looks like
both columns except
text because you could see there's text
over here and there's text over here
but again let's do our due diligence and
apply all the steps
the first one is to find
number of columns
that the vulnerable query is using and
we said the way to do that is to use the
order by clause
now if i'm ordering by column one
and column one does not exist the
application will throw an internal
server error
however if column one exists then it'll
throw a 200 response
confirming that the request was
successful so let's try that out
and we'll use burp suite to do that
let's click close next star burp
okay so i'm going to put it over here
and then set my browser to send requests
to burp
and i'm going to click on accessories
again
and you'll notice over here the request
got sent to my proxy
so i'm going to send this to repeater
because i'm going to use it multiple
times
remove the intercept
and go to the repeater tab
okay so let's try ordering by the first
column
do control u to url encoded
and we get an internal server error
which is very weird because i know
there's at least two columns
based on what i see in the browser so my
guess is the internal server error is
getting
displayed because it doesn't like one of
the characters that i'm using so let's
start with the
comment character which was dash dash
there's another way to comment out the
rest of the query which is using the
hash sign
so let's test that out
there is one more in case this one
doesn't work
so control you hit enter
and we get a 200 response so the
characters that it doesn't like is the
dash dash characters
all right so next let's order by the
second column
this should also exist because we saw it
in the browser
all right 200 response let's try three
hit enter and we get an internal server
error
so let's write that down
and what that means is we're trying to
order by a column that does not exist
and since we did this iteratively it
means that the number of columns that
the vulnerable query is using is three
minus one which is equal to
two
all right the second thing to do is
figure out
which columns contain
text because the items that we want to
display which is the version
of the database is of text value and so
we need to find
columns that accept that value and again
based on what we saw in the browser
both columns to the first column over
here and the second column over here
they should both accept text because we
can see that they contain text
so instead of doing this iteratively i'm
just going to do a union select
put both text values in both columns
so union select a a and comment out the
rest of the query
and test it out usually we do this
iteratively but again i can see in the
browser that they both accept type
text so ctrl
u and i did that incorrectly
okay hit send and you get a 200 response
which is good you should be able to see
your a value so you see it
over here and over here all right so
both columns accept
type text the next thing to do is to
actually output data from the page so
output the
version and the way to do that
is it's dependent on the type of
database that you're working with
so that's where we go to the hint and
look at the cheat sheet
so if you go down you'll see for
database version
it tells you for oracle this is the way
you do it for microsoft this is the way
you do it for postgresql this is the way
you do it and for mysql this is the way
you do it now i know for sure that this
is not an oracle database
because this query over here would have
failed because as we saw in the last lab
oracle requires that you have a from
clause and we didn't
put it over here and our query worked so
the next thing to try
is the microsoft database
so select add add so the exercise does
tell you the type of database but we're
assuming that
you're in a real-life engagement
where you don't know what database
you're dealing with
so we'll put it in our union payload so
union select at version
and then again we have two columns so we
still have to put a null value over here
and comment out the rest of the query
okay
let's paste that over here and url
encode it using control u
hit send and we get a 200 response code
which is
good now let's see if it outputted the
version
here we go so you could see the version
is 8.0
23 which i believe is my sequel
but i could be wrong so let's go back to
the page
and it says congratulations you've
solved the lab alright so we've
successfully completed the exercise
now let's try and script it
okay so let's save this first
and start our script so the first thing
to do is import the request library
which will allow you to do get and post
requests
next we import the sys library and
url lib3
we'll also add this line over here so
that it disables
any insecure request warnings so url
lib3.exceptions
dot insecure request warning
okay and set our proxy setting
so proxies is equal to
http http
[Music]
127.0.0.1
8080 and https
127.00
8080. okay
next we'll create our main method so
if name is equal to equal to
main
and we've got a try and an accept
clause
so it'll take in the command line
argument
so the first one which is going to be
the url
so rxv1 dot strip
and so the way i want to run my script
is i want to do script
dot py and it takes in one argument
which is
the url okay so i'm not doing step
number one and step number two in the
script because we've done it in previous
labs so i'll leave it as an exercise for
you to complete
instead i'm going to assume that i know
the number of columns and i know the
columns that accept text and all i want
my script to do is
output the version of the database
okay so assuming i don't give it the
correct number of
arguments i wanted to print the usage
instructions
so usage is name of program
and then url
okay and i also wanted to print an
example instructions just so that it's
clear
so let's say www.example.com
says the argb zero so name of the
program
okay uh we forgot to
exit the program so let's exit because
we ran it incorrectly
all right so assuming i give it the
correct number of arguments
and it saves the url in the parameter
url
or in the variable url i want it to
print
dumping the version of the
database
and then i'm going to create a function
in a bit that is called
exploit sqli
version that takes in the url if that
function returns false
i want it to print
unable to dump the database version
okay and if it returns true it'll return
the
version but we'll implement that logic
in the function itself
all right so let's define the function
so exploit
sqli version again it takes in the url
now i have to build my requests so
we'll start off by defining the path
and we'll get that from over here so
it's
slash filter and then the category
let's copy that
next we need our sql payload
and we'll get that from our nodes
and it was this one over here
okay and next we need to make the
request so i'm using
the get method because that's the method
that is used over here
and it would be the url
plus the path plus the sql payload
i'm going to set verify to be equal to
false because i don't want to verify
certificates and i'm going to set
proxies to be equal to proxies so that
the request that i'm making
gets sent to burp and this way i can
debug it
in case my program doesn't work next i'm
going to set the response in a variable
called ras
and now i want a way to extract
the version from the database
and to do that we need to import two
more libraries
so from bs4
import beautiful soup and
import the regular expressions library
and what this will do is
it will allow us to parse the response
and extract the
version of the database okay
so let's say soup sequel to
beautiful soup res
and html dot parser
now i'm going to say the version of the
database is equal to soup.find
and we're going to say text is equal to
re.compile
so compile the following regular
expression
and what i'm looking for is a digit
dot digit dot and then two more digits
now just to be safe i'm gonna look for
two digits dot two digits dot two digits
so to do that i'm gonna say any number
of
characters and then look for
two digits so either one or two
digits
and then look for the dot character
and then look for another two digits
one or two digits and then look for the
dot character
and then again look for another two
digits
and then any number of characters again
now
it's very easy to mess up regular
expressions and so what i'm going to do
is i'm going to copy this
and i'm going to confirm it in
the page reserves 101
i'm going to put it over here and
it looks like it's a proper regular
expression now i want to see if
it will actually match on the page over
here
so let's just copy this portion of the
page
and put it here and it says it matched
it
so this should work theoretically this
should work because i put my regular
expression over here i put
a portion of the content of the page and
it was able to match on this one over
here as seen in this screen response
so good that gives me some level of
assurance
now let's go back to birth all right
so the next thing to do is to check if
the version
is none so it didn't find the version at
all
then i want it to return false
and if it returns false it'll print the
statement over here unable to dump the
database version
otherwise it found the version and i
want it to print
the database
version is
and version over here so
the version variable that we extracted
over here
all right and then return true
okay we saved that now let's click on
terminal
new terminal and run it but before we do
that let's go
to the proxy tab and history tab
and click over here this way we could
see our requests in real time so
sqlib08
dot py and we need
the url i'm assuming it timed out
let's double check that and it did so we
have to
generate a new instance of the lab
okay let's grab the url
add it over here and remove the
slash because we already included it in
the path over here
and hit enter and we get an invalid
syntax error and it's on line
21. so it's because i forgot to add the
plus sign
save it again clear and let's run it one
more
time okay that's interesting so
i'm getting an insecure warning error
although i've already removed that using
this over here
[Music]
okay so it looks like i've removed the
incorrect one
so let's do it one more time dot
insecure request warning
here we go let's clear it one more time
hit enter
and it says unable to dump the database
version now this is where burp comes in
handy
so let's look at what response it's
getting
and it looks like it's getting an
internal server error
okay and i know why you could see over
here
the hash is in the string but it's not
getting displayed in the request
so i think it's intercepting it as
a comment in python but i could be wrong
so the way to fix that is to just url
encode it from the get go so percentage
23 and let's save it one more time and
see if it actually
views it as part of the query hit enter
okay so it says the database version is
8.0.23 so it found it and if we look
over here you'll see
that it intercepted it as part of the
url
okay so i'm not sure if this is a python
issue or
a url encoding issue that caused this
but if you do url encoded the script
works all right so we've successfully
completed the exercise to recap in this
video we first manually ran a sql
injection union attack that allowed us
to query the database type and version
on a mysql database we then scripted the
exploit so that it automatically does
that for us
in the next lab we'll learn how to
exploit a union-based sql
injection vulnerability in order to list
the database content on non-oracle
databases if you liked the video hit the
subscribe and share button so that it
reaches a wider
audience also comment below what you
learned and what you would like to see
more of in the future thank you and see
you in the next video